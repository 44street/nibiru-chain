// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NibiruChain/nibiru/feeder/priceprovider (interfaces: PriceProvider)

// Package mock_priceprovider is a generated GoMock package.
package mock_priceprovider

import (
	reflect "reflect"

	priceprovider "github.com/NibiruChain/nibiru/feeder/priceprovider"
	gomock "github.com/golang/mock/gomock"
)

// MockPriceProvider is a mock of PriceProvider interface.
type MockPriceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockPriceProviderMockRecorder
}

// MockPriceProviderMockRecorder is the mock recorder for MockPriceProvider.
type MockPriceProviderMockRecorder struct {
	mock *MockPriceProvider
}

// NewMockPriceProvider creates a new mock instance.
func NewMockPriceProvider(ctrl *gomock.Controller) *MockPriceProvider {
	mock := &MockPriceProvider{ctrl: ctrl}
	mock.recorder = &MockPriceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPriceProvider) EXPECT() *MockPriceProviderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPriceProvider) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockPriceProviderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPriceProvider)(nil).Close))
}

// GetPrice mocks base method.
func (m *MockPriceProvider) GetPrice(arg0 string) priceprovider.PriceResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrice", arg0)
	ret0, _ := ret[0].(priceprovider.PriceResponse)
	return ret0
}

// GetPrice indicates an expected call of GetPrice.
func (mr *MockPriceProviderMockRecorder) GetPrice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrice", reflect.TypeOf((*MockPriceProvider)(nil).GetPrice), arg0)
}

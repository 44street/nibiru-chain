// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NibiruChain/nibiru/feeder (interfaces: EventsStream)

// Package mock_feeder is a generated GoMock package.
package mock_feeder

import (
	reflect "reflect"

	feeder "github.com/NibiruChain/nibiru/feeder"
	gomock "github.com/golang/mock/gomock"
)

// MockEventsStream is a mock of EventsStream interface.
type MockEventsStream struct {
	ctrl     *gomock.Controller
	recorder *MockEventsStreamMockRecorder
}

// MockEventsStreamMockRecorder is the mock recorder for MockEventsStream.
type MockEventsStreamMockRecorder struct {
	mock *MockEventsStream
}

// NewMockEventsStream creates a new mock instance.
func NewMockEventsStream(ctrl *gomock.Controller) *MockEventsStream {
	mock := &MockEventsStream{ctrl: ctrl}
	mock.recorder = &MockEventsStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventsStream) EXPECT() *MockEventsStreamMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockEventsStream) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockEventsStreamMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEventsStream)(nil).Close))
}

// NewVotingPeriod mocks base method.
func (m *MockEventsStream) NewVotingPeriod() <-chan feeder.VotingPeriod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewVotingPeriod")
	ret0, _ := ret[0].(<-chan feeder.VotingPeriod)
	return ret0
}

// NewVotingPeriod indicates an expected call of NewVotingPeriod.
func (mr *MockEventsStreamMockRecorder) NewVotingPeriod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewVotingPeriod", reflect.TypeOf((*MockEventsStream)(nil).NewVotingPeriod))
}

// ParamsUpdate mocks base method.
func (m *MockEventsStream) ParamsUpdate() <-chan feeder.Params {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParamsUpdate")
	ret0, _ := ret[0].(<-chan feeder.Params)
	return ret0
}

// ParamsUpdate indicates an expected call of ParamsUpdate.
func (mr *MockEventsStreamMockRecorder) ParamsUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParamsUpdate", reflect.TypeOf((*MockEventsStream)(nil).ParamsUpdate))
}

// ValidatorSetChanges mocks base method.
func (m *MockEventsStream) ValidatorSetChanges() <-chan feeder.ValidatorSetChanges {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatorSetChanges")
	ret0, _ := ret[0].(<-chan feeder.ValidatorSetChanges)
	return ret0
}

// ValidatorSetChanges indicates an expected call of ValidatorSetChanges.
func (mr *MockEventsStreamMockRecorder) ValidatorSetChanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatorSetChanges", reflect.TypeOf((*MockEventsStream)(nil).ValidatorSetChanges))
}

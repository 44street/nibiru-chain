// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NibiruChain/nibiru/feeder (interfaces: TxClient)

// Package mock_feeder is a generated GoMock package.
package mock_feeder

import (
	reflect "reflect"

	feeder "github.com/NibiruChain/nibiru/feeder"
	gomock "github.com/golang/mock/gomock"
)

// MockTxClient is a mock of TxClient interface.
type MockTxClient struct {
	ctrl     *gomock.Controller
	recorder *MockTxClientMockRecorder
}

// MockTxClientMockRecorder is the mock recorder for MockTxClient.
type MockTxClientMockRecorder struct {
	mock *MockTxClient
}

// NewMockTxClient creates a new mock instance.
func NewMockTxClient(ctrl *gomock.Controller) *MockTxClient {
	mock := &MockTxClient{ctrl: ctrl}
	mock.recorder = &MockTxClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxClient) EXPECT() *MockTxClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTxClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockTxClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTxClient)(nil).Close))
}

// SendPrices mocks base method.
func (m *MockTxClient) SendPrices(arg0 []feeder.SymbolPrice) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendPrices", arg0)
}

// SendPrices indicates an expected call of SendPrices.
func (mr *MockTxClientMockRecorder) SendPrices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPrices", reflect.TypeOf((*MockTxClient)(nil).SendPrices), arg0)
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: perp/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8212d8958be09421, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8212d8958be09421, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// ---------------------------------------- TraderPositions
type QueryTraderPositionsRequest struct {
	Trader string `protobuf:"bytes,1,opt,name=trader,proto3" json:"trader,omitempty"`
}

func (m *QueryTraderPositionsRequest) Reset()         { *m = QueryTraderPositionsRequest{} }
func (m *QueryTraderPositionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTraderPositionsRequest) ProtoMessage()    {}
func (*QueryTraderPositionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8212d8958be09421, []int{2}
}
func (m *QueryTraderPositionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTraderPositionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTraderPositionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTraderPositionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTraderPositionsRequest.Merge(m, src)
}
func (m *QueryTraderPositionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTraderPositionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTraderPositionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTraderPositionsRequest proto.InternalMessageInfo

func (m *QueryTraderPositionsRequest) GetTrader() string {
	if m != nil {
		return m.Trader
	}
	return ""
}

type QueryTraderPositionsResponse struct {
	Positions []*QueryTraderPositionResponse `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions,omitempty"`
}

func (m *QueryTraderPositionsResponse) Reset()         { *m = QueryTraderPositionsResponse{} }
func (m *QueryTraderPositionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTraderPositionsResponse) ProtoMessage()    {}
func (*QueryTraderPositionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8212d8958be09421, []int{3}
}
func (m *QueryTraderPositionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTraderPositionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTraderPositionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTraderPositionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTraderPositionsResponse.Merge(m, src)
}
func (m *QueryTraderPositionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTraderPositionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTraderPositionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTraderPositionsResponse proto.InternalMessageInfo

func (m *QueryTraderPositionsResponse) GetPositions() []*QueryTraderPositionResponse {
	if m != nil {
		return m.Positions
	}
	return nil
}

// QueryTraderPositionRequest is the request type for the position of the x/perp
// module account.
type QueryTraderPositionRequest struct {
	TokenPair string `protobuf:"bytes,1,opt,name=token_pair,json=tokenPair,proto3" json:"token_pair,omitempty"`
	Trader    string `protobuf:"bytes,2,opt,name=trader,proto3" json:"trader,omitempty"`
}

func (m *QueryTraderPositionRequest) Reset()         { *m = QueryTraderPositionRequest{} }
func (m *QueryTraderPositionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTraderPositionRequest) ProtoMessage()    {}
func (*QueryTraderPositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8212d8958be09421, []int{4}
}
func (m *QueryTraderPositionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTraderPositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTraderPositionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTraderPositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTraderPositionRequest.Merge(m, src)
}
func (m *QueryTraderPositionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTraderPositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTraderPositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTraderPositionRequest proto.InternalMessageInfo

func (m *QueryTraderPositionRequest) GetTokenPair() string {
	if m != nil {
		return m.TokenPair
	}
	return ""
}

func (m *QueryTraderPositionRequest) GetTrader() string {
	if m != nil {
		return m.Trader
	}
	return ""
}

type QueryTraderPositionResponse struct {
	// The position as it exists in the blockchain state
	Position *Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	// The position's current notional value, if it were to be entirely closed (in
	// margin units).
	PositionNotional github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=position_notional,json=positionNotional,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"position_notional"`
	// The position's unrealized PnL.
	UnrealizedPnl github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=unrealized_pnl,json=unrealizedPnl,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"unrealized_pnl"`
	// margin ratio of the position based on the mark price, mark TWAP. The higher
	// value of the possible margin ratios (TWAP and instantaneous) is taken to be
	// 'marginRatioMark'. Calculated from margin, unrealized PnL, and position
	// notional.
	MarginRatioMark github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=margin_ratio_mark,json=marginRatioMark,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"margin_ratio_mark"`
	// margin ratio of the position based on the index price. Calculated from
	// margin, unrealized PnL, and position notional.
	MarginRatioIndex github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=margin_ratio_index,json=marginRatioIndex,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"margin_ratio_index"`
	// BlockNumber is current block number at the time of query.
	BlockNumber int64 `protobuf:"varint,7,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (m *QueryTraderPositionResponse) Reset()         { *m = QueryTraderPositionResponse{} }
func (m *QueryTraderPositionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTraderPositionResponse) ProtoMessage()    {}
func (*QueryTraderPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8212d8958be09421, []int{5}
}
func (m *QueryTraderPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTraderPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTraderPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTraderPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTraderPositionResponse.Merge(m, src)
}
func (m *QueryTraderPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTraderPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTraderPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTraderPositionResponse proto.InternalMessageInfo

func (m *QueryTraderPositionResponse) GetPosition() *Position {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *QueryTraderPositionResponse) GetBlockNumber() int64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

type QueryFundingRatesRequest struct {
	// the pair to query for
	Pair string `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
}

func (m *QueryFundingRatesRequest) Reset()         { *m = QueryFundingRatesRequest{} }
func (m *QueryFundingRatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFundingRatesRequest) ProtoMessage()    {}
func (*QueryFundingRatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8212d8958be09421, []int{6}
}
func (m *QueryFundingRatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFundingRatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFundingRatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFundingRatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFundingRatesRequest.Merge(m, src)
}
func (m *QueryFundingRatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFundingRatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFundingRatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFundingRatesRequest proto.InternalMessageInfo

func (m *QueryFundingRatesRequest) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

type QueryFundingRatesResponse struct {
	// a historical list of cumulative funding rates, with the most recent one
	// last
	CumulativeFundingRates []github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,rep,name=cumulative_funding_rates,json=cumulativeFundingRates,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"cumulative_funding_rates"`
}

func (m *QueryFundingRatesResponse) Reset()         { *m = QueryFundingRatesResponse{} }
func (m *QueryFundingRatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFundingRatesResponse) ProtoMessage()    {}
func (*QueryFundingRatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8212d8958be09421, []int{7}
}
func (m *QueryFundingRatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFundingRatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFundingRatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFundingRatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFundingRatesResponse.Merge(m, src)
}
func (m *QueryFundingRatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFundingRatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFundingRatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFundingRatesResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "nibiru.perp.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "nibiru.perp.v1.QueryParamsResponse")
	proto.RegisterType((*QueryTraderPositionsRequest)(nil), "nibiru.perp.v1.QueryTraderPositionsRequest")
	proto.RegisterType((*QueryTraderPositionsResponse)(nil), "nibiru.perp.v1.QueryTraderPositionsResponse")
	proto.RegisterType((*QueryTraderPositionRequest)(nil), "nibiru.perp.v1.QueryTraderPositionRequest")
	proto.RegisterType((*QueryTraderPositionResponse)(nil), "nibiru.perp.v1.QueryTraderPositionResponse")
	proto.RegisterType((*QueryFundingRatesRequest)(nil), "nibiru.perp.v1.QueryFundingRatesRequest")
	proto.RegisterType((*QueryFundingRatesResponse)(nil), "nibiru.perp.v1.QueryFundingRatesResponse")
}

func init() { proto.RegisterFile("perp/v1/query.proto", fileDescriptor_8212d8958be09421) }

var fileDescriptor_8212d8958be09421 = []byte{
	// 689 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x4f, 0x4f, 0xd4, 0x40,
	0x14, 0xdf, 0xb2, 0xcb, 0x2a, 0x03, 0xa2, 0x0c, 0x48, 0xea, 0xb2, 0x14, 0xac, 0x7f, 0xb2, 0xa2,
	0xb6, 0x01, 0xf5, 0x0b, 0x20, 0x31, 0x21, 0x46, 0xb2, 0x56, 0xbd, 0xa0, 0x49, 0x33, 0xbb, 0x3b,
	0x96, 0xc9, 0xb6, 0x33, 0x65, 0xda, 0x12, 0xf0, 0x68, 0x62, 0xbc, 0x9a, 0xe8, 0xc1, 0xef, 0xe1,
	0x97, 0xe0, 0x48, 0xe2, 0xc5, 0x78, 0x20, 0x06, 0xf8, 0x20, 0xa6, 0x33, 0xd3, 0xa5, 0xd5, 0x86,
	0x2c, 0x9c, 0x3a, 0xfb, 0xe6, 0xf7, 0x7e, 0xef, 0xf7, 0xde, 0xbc, 0xf7, 0x16, 0x4c, 0x87, 0x98,
	0x87, 0xf6, 0xce, 0xb2, 0xbd, 0x9d, 0x60, 0xbe, 0x67, 0x85, 0x9c, 0xc5, 0x0c, 0x4e, 0x52, 0xd2,
	0x21, 0x3c, 0xb1, 0xd2, 0x3b, 0x6b, 0x67, 0xb9, 0x31, 0xe3, 0x31, 0x8f, 0x89, 0x2b, 0x3b, 0x3d,
	0x49, 0x54, 0xa3, 0xe9, 0x31, 0xe6, 0xf9, 0xd8, 0x46, 0x21, 0xb1, 0x11, 0xa5, 0x2c, 0x46, 0x31,
	0x61, 0x34, 0x52, 0xb7, 0x03, 0xe2, 0x28, 0x46, 0x31, 0x96, 0x46, 0x73, 0x06, 0xc0, 0x97, 0x69,
	0x9c, 0x36, 0xe2, 0x28, 0x88, 0x1c, 0xbc, 0x9d, 0xe0, 0x28, 0x36, 0x9f, 0x83, 0xe9, 0x82, 0x35,
	0x0a, 0x19, 0x8d, 0x30, 0x7c, 0x0c, 0xea, 0xa1, 0xb0, 0xe8, 0xda, 0xa2, 0xd6, 0x1a, 0x5f, 0x99,
	0xb5, 0x8a, 0xb2, 0x2c, 0x89, 0x5f, 0xad, 0xed, 0x1f, 0x2e, 0x54, 0x1c, 0x85, 0x35, 0x9f, 0x80,
	0x39, 0x41, 0xf6, 0x9a, 0xa3, 0x1e, 0xe6, 0x6d, 0x16, 0x11, 0xa1, 0x4a, 0xc5, 0x82, 0xb3, 0xa0,
	0x1e, 0x8b, 0x1b, 0x41, 0x3a, 0xe6, 0xa8, 0x5f, 0x26, 0x01, 0xcd, 0x72, 0x37, 0x25, 0x66, 0x1d,
	0x8c, 0x85, 0x99, 0x51, 0xd7, 0x16, 0xab, 0xad, 0xf1, 0x95, 0xfb, 0xff, 0xea, 0x29, 0x21, 0xc8,
	0xfc, 0x9d, 0x53, 0x6f, 0xf3, 0x15, 0x68, 0x94, 0x22, 0xa5, 0xc0, 0x79, 0x00, 0x62, 0xd6, 0xc7,
	0xd4, 0x0d, 0x11, 0xc9, 0x44, 0x8e, 0x09, 0x4b, 0x1b, 0x11, 0x9e, 0xd3, 0x3f, 0x52, 0xd0, 0x7f,
	0x52, 0x2d, 0xcd, 0x3b, 0x57, 0xcc, 0xcb, 0x99, 0x02, 0x55, 0x4e, 0xfd, 0xbf, 0x72, 0x66, 0x3e,
	0x03, 0x24, 0x7c, 0x0b, 0xa6, 0xb2, 0xb3, 0x4b, 0x59, 0xfa, 0x41, 0xbe, 0x0c, 0xbc, 0x6a, 0xa5,
	0x55, 0xff, 0x7d, 0xb8, 0x70, 0xd7, 0x23, 0xf1, 0x56, 0xd2, 0xb1, 0xba, 0x2c, 0xb0, 0xbb, 0x2c,
	0x0a, 0x58, 0xa4, 0x3e, 0x0f, 0xa3, 0x5e, 0xdf, 0x8e, 0xf7, 0x42, 0x1c, 0x59, 0x6b, 0xb8, 0xeb,
	0x5c, 0xcb, 0x88, 0x36, 0x14, 0x0f, 0x7c, 0x03, 0x26, 0x13, 0xca, 0x31, 0xf2, 0xc9, 0x07, 0xdc,
	0x73, 0x43, 0xea, 0xeb, 0xd5, 0x0b, 0x31, 0x5f, 0x39, 0x65, 0x69, 0x53, 0x1f, 0x6e, 0x82, 0xa9,
	0x00, 0x71, 0x8f, 0x50, 0x97, 0xa7, 0x0d, 0xe9, 0x06, 0x88, 0xf7, 0xf5, 0xda, 0x85, 0x98, 0xaf,
	0x4a, 0x22, 0x27, 0xe5, 0x79, 0x81, 0x78, 0x1f, 0xbe, 0x03, 0xb0, 0xc0, 0x4d, 0x68, 0x0f, 0xef,
	0xea, 0xa3, 0x17, 0x2b, 0x48, 0x8e, 0x7c, 0x3d, 0xe5, 0x81, 0x37, 0xc1, 0x44, 0xc7, 0x67, 0xdd,
	0xbe, 0x4b, 0x93, 0xa0, 0x83, 0xb9, 0x7e, 0x69, 0x51, 0x6b, 0x55, 0x9d, 0x71, 0x61, 0xdb, 0x10,
	0x26, 0xd3, 0x02, 0xba, 0x78, 0xe5, 0x67, 0x09, 0xed, 0x11, 0xea, 0x39, 0x28, 0xc6, 0x83, 0xd6,
	0x86, 0xa0, 0x96, 0xeb, 0x19, 0x71, 0x36, 0x3f, 0x69, 0xe0, 0x46, 0x89, 0x83, 0x6a, 0x8a, 0x2d,
	0xa0, 0x77, 0x93, 0x20, 0xf1, 0x51, 0x4c, 0x76, 0xb0, 0xfb, 0x5e, 0x42, 0xd2, 0xd4, 0xb0, 0xec,
	0xf1, 0xf3, 0x27, 0x35, 0x7b, 0xca, 0x97, 0x8f, 0xb8, 0xf2, 0xa3, 0x06, 0x46, 0x85, 0x0e, 0x48,
	0x41, 0x5d, 0xce, 0x2d, 0x34, 0x4b, 0xe7, 0xa7, 0xb0, 0x1a, 0x1a, 0xb7, 0xce, 0xc4, 0xc8, 0x34,
	0xcc, 0xb9, 0x8f, 0x3f, 0x4f, 0xbe, 0x8e, 0x5c, 0x87, 0xd3, 0xb6, 0x04, 0xdb, 0x62, 0xf5, 0xc8,
	0x7d, 0x00, 0xbf, 0x69, 0x6a, 0xbb, 0x14, 0x07, 0x03, 0x2e, 0x0d, 0x35, 0xbd, 0x52, 0xc5, 0x79,
	0x26, 0xdd, 0xbc, 0x2d, 0xd4, 0x18, 0xb0, 0x59, 0x50, 0x23, 0xc7, 0xd4, 0x1d, 0x4c, 0xd6, 0x77,
	0x0d, 0xcc, 0x94, 0x2d, 0x1c, 0x38, 0x4c, 0xac, 0x41, 0x79, 0x1e, 0x0c, 0x07, 0x56, 0xca, 0xee,
	0x08, 0x65, 0x0b, 0x70, 0xfe, 0x2c, 0x65, 0x11, 0xfc, 0xac, 0x81, 0x89, 0xfc, 0xe3, 0xc1, 0x56,
	0x69, 0x94, 0x92, 0x16, 0x6c, 0xdc, 0x1b, 0x02, 0xa9, 0xc4, 0x98, 0x42, 0x4c, 0x13, 0x36, 0x0a,
	0x62, 0x0a, 0x3d, 0xb8, 0xba, 0xb6, 0x7f, 0x64, 0x68, 0x07, 0x47, 0x86, 0xf6, 0xe7, 0xc8, 0xd0,
	0xbe, 0x1c, 0x1b, 0x95, 0x83, 0x63, 0xa3, 0xf2, 0xeb, 0xd8, 0xa8, 0x6c, 0x2e, 0xe5, 0xfa, 0x71,
	0x43, 0xf8, 0x3f, 0xdd, 0x42, 0x84, 0x66, 0x5c, 0xbb, 0x2a, 0xb5, 0xb4, 0x2f, 0x3b, 0x75, 0xf1,
	0xdf, 0xf3, 0xe8, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd4, 0xf1, 0xab, 0x11, 0xeb, 0x06, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the x/perp module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	QueryTraderPosition(ctx context.Context, in *QueryTraderPositionRequest, opts ...grpc.CallOption) (*QueryTraderPositionResponse, error)
	QueryTraderPositions(ctx context.Context, in *QueryTraderPositionsRequest, opts ...grpc.CallOption) (*QueryTraderPositionsResponse, error)
	FundingRates(ctx context.Context, in *QueryFundingRatesRequest, opts ...grpc.CallOption) (*QueryFundingRatesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/nibiru.perp.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryTraderPosition(ctx context.Context, in *QueryTraderPositionRequest, opts ...grpc.CallOption) (*QueryTraderPositionResponse, error) {
	out := new(QueryTraderPositionResponse)
	err := c.cc.Invoke(ctx, "/nibiru.perp.v1.Query/QueryTraderPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryTraderPositions(ctx context.Context, in *QueryTraderPositionsRequest, opts ...grpc.CallOption) (*QueryTraderPositionsResponse, error) {
	out := new(QueryTraderPositionsResponse)
	err := c.cc.Invoke(ctx, "/nibiru.perp.v1.Query/QueryTraderPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FundingRates(ctx context.Context, in *QueryFundingRatesRequest, opts ...grpc.CallOption) (*QueryFundingRatesResponse, error) {
	out := new(QueryFundingRatesResponse)
	err := c.cc.Invoke(ctx, "/nibiru.perp.v1.Query/FundingRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the x/perp module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	QueryTraderPosition(context.Context, *QueryTraderPositionRequest) (*QueryTraderPositionResponse, error)
	QueryTraderPositions(context.Context, *QueryTraderPositionsRequest) (*QueryTraderPositionsResponse, error)
	FundingRates(context.Context, *QueryFundingRatesRequest) (*QueryFundingRatesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) QueryTraderPosition(ctx context.Context, req *QueryTraderPositionRequest) (*QueryTraderPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTraderPosition not implemented")
}
func (*UnimplementedQueryServer) QueryTraderPositions(ctx context.Context, req *QueryTraderPositionsRequest) (*QueryTraderPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTraderPositions not implemented")
}
func (*UnimplementedQueryServer) FundingRates(ctx context.Context, req *QueryFundingRatesRequest) (*QueryFundingRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundingRates not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nibiru.perp.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryTraderPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTraderPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryTraderPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nibiru.perp.v1.Query/QueryTraderPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryTraderPosition(ctx, req.(*QueryTraderPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryTraderPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTraderPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryTraderPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nibiru.perp.v1.Query/QueryTraderPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryTraderPositions(ctx, req.(*QueryTraderPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FundingRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFundingRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FundingRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nibiru.perp.v1.Query/FundingRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FundingRates(ctx, req.(*QueryFundingRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nibiru.perp.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "QueryTraderPosition",
			Handler:    _Query_QueryTraderPosition_Handler,
		},
		{
			MethodName: "QueryTraderPositions",
			Handler:    _Query_QueryTraderPositions_Handler,
		},
		{
			MethodName: "FundingRates",
			Handler:    _Query_FundingRates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "perp/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTraderPositionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTraderPositionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTraderPositionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Trader) > 0 {
		i -= len(m.Trader)
		copy(dAtA[i:], m.Trader)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Trader)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTraderPositionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTraderPositionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTraderPositionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Positions) > 0 {
		for iNdEx := len(m.Positions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Positions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTraderPositionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTraderPositionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTraderPositionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Trader) > 0 {
		i -= len(m.Trader)
		copy(dAtA[i:], m.Trader)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Trader)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenPair) > 0 {
		i -= len(m.TokenPair)
		copy(dAtA[i:], m.TokenPair)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenPair)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTraderPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTraderPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTraderPositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.MarginRatioIndex.Size()
		i -= size
		if _, err := m.MarginRatioIndex.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.MarginRatioMark.Size()
		i -= size
		if _, err := m.MarginRatioMark.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.UnrealizedPnl.Size()
		i -= size
		if _, err := m.UnrealizedPnl.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.PositionNotional.Size()
		i -= size
		if _, err := m.PositionNotional.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFundingRatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFundingRatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFundingRatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pair) > 0 {
		i -= len(m.Pair)
		copy(dAtA[i:], m.Pair)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Pair)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFundingRatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFundingRatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFundingRatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CumulativeFundingRates) > 0 {
		for iNdEx := len(m.CumulativeFundingRates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.CumulativeFundingRates[iNdEx].Size()
				i -= size
				if _, err := m.CumulativeFundingRates[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTraderPositionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Trader)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTraderPositionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Positions) > 0 {
		for _, e := range m.Positions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTraderPositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenPair)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Trader)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTraderPositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.PositionNotional.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.UnrealizedPnl.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.MarginRatioMark.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.MarginRatioIndex.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.BlockNumber != 0 {
		n += 1 + sovQuery(uint64(m.BlockNumber))
	}
	return n
}

func (m *QueryFundingRatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pair)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFundingRatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CumulativeFundingRates) > 0 {
		for _, e := range m.CumulativeFundingRates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTraderPositionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTraderPositionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTraderPositionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTraderPositionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTraderPositionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTraderPositionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Positions = append(m.Positions, &QueryTraderPositionResponse{})
			if err := m.Positions[len(m.Positions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTraderPositionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTraderPositionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTraderPositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenPair = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTraderPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTraderPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTraderPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &Position{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionNotional", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PositionNotional.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnrealizedPnl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnrealizedPnl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarginRatioMark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarginRatioMark.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarginRatioIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarginRatioIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFundingRatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFundingRatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFundingRatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pair = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFundingRatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFundingRatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFundingRatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeFundingRates", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.CumulativeFundingRates = append(m.CumulativeFundingRates, v)
			if err := m.CumulativeFundingRates[len(m.CumulativeFundingRates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pricefeed/proposal.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// WhitelistPriceOracleProposal is a proposal to whitelist an address that can propose prices.
type WhitelistPriceOracleProposal struct {
	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *WhitelistPriceOracleProposal) Reset()      { *m = WhitelistPriceOracleProposal{} }
func (*WhitelistPriceOracleProposal) ProtoMessage() {}
func (*WhitelistPriceOracleProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_4962892de5f5aeea, []int{0}
}
func (m *WhitelistPriceOracleProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhitelistPriceOracleProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhitelistPriceOracleProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhitelistPriceOracleProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhitelistPriceOracleProposal.Merge(m, src)
}
func (m *WhitelistPriceOracleProposal) XXX_Size() int {
	return m.Size()
}
func (m *WhitelistPriceOracleProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_WhitelistPriceOracleProposal.DiscardUnknown(m)
}

var xxx_messageInfo_WhitelistPriceOracleProposal proto.InternalMessageInfo

func (m *WhitelistPriceOracleProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *WhitelistPriceOracleProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterType((*WhitelistPriceOracleProposal)(nil), "NibiruChain.pricefeed.v1.WhitelistPriceOracleProposal")
}

func init() { proto.RegisterFile("pricefeed/proposal.proto", fileDescriptor_4962892de5f5aeea) }

var fileDescriptor_4962892de5f5aeea = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x63, 0x24, 0x10, 0x84, 0x2d, 0xea, 0x10, 0x2a, 0xe4, 0x54, 0x4c, 0x4c, 0xb1, 0x10,
	0x1b, 0x23, 0xec, 0x50, 0x58, 0x90, 0x58, 0x20, 0x49, 0xaf, 0xc9, 0x49, 0x49, 0xce, 0xb2, 0x2f,
	0x08, 0xfe, 0x05, 0x23, 0x63, 0x47, 0x7e, 0x0a, 0x63, 0x47, 0xc6, 0x92, 0x2c, 0xfc, 0x0c, 0x54,
	0xbb, 0x82, 0x6e, 0xef, 0x3d, 0x7f, 0xd6, 0xbd, 0xbb, 0x30, 0xd6, 0x06, 0x0b, 0x98, 0x03, 0xcc,
	0x94, 0x36, 0xa4, 0xc9, 0x66, 0x75, 0xaa, 0x0d, 0x31, 0x45, 0xf1, 0x35, 0xe6, 0x68, 0xba, 0xab,
	0x2a, 0xc3, 0x36, 0xfd, 0xa3, 0xd2, 0xe7, 0xb3, 0xf1, 0x51, 0x41, 0xb6, 0x21, 0xfb, 0xe8, 0x38,
	0xe5, 0x8d, 0xff, 0x34, 0x1e, 0x95, 0x54, 0x92, 0xcf, 0xd7, 0x6a, 0x93, 0x26, 0x25, 0x51, 0x59,
	0x83, 0x72, 0x2e, 0xef, 0xe6, 0x8a, 0xb1, 0x01, 0xcb, 0x59, 0xa3, 0x3d, 0x70, 0xf2, 0x14, 0x1e,
	0xdf, 0x57, 0xc8, 0x50, 0xa3, 0xe5, 0xe9, 0x7a, 0xd4, 0x8d, 0xc9, 0x8a, 0x1a, 0xa6, 0x9b, 0x46,
	0xd1, 0x28, 0xdc, 0x65, 0xe4, 0x1a, 0x62, 0x31, 0x11, 0xa7, 0x07, 0x77, 0xde, 0x44, 0x93, 0xf0,
	0x70, 0x06, 0xb6, 0x30, 0xa8, 0x19, 0xa9, 0x8d, 0x77, 0xdc, 0xdb, 0x76, 0x74, 0xb1, 0xff, 0xbe,
	0x48, 0x82, 0x9f, 0x45, 0x22, 0x2e, 0x6f, 0x57, 0xdf, 0x52, 0x7c, 0xf4, 0x52, 0x7c, 0xf6, 0x52,
	0x2c, 0x7b, 0x29, 0x56, 0xbd, 0x14, 0x6f, 0x83, 0x0c, 0x96, 0x83, 0x0c, 0xbe, 0x06, 0x19, 0x3c,
	0xa8, 0x12, 0xb9, 0xea, 0xf2, 0xb4, 0xa0, 0x46, 0x6d, 0xad, 0xae, 0x5a, 0xa7, 0xd5, 0x8b, 0xfa,
	0xbf, 0x14, 0xbf, 0x6a, 0xb0, 0xf9, 0x9e, 0xeb, 0x7e, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x8f,
	0x5b, 0xd3, 0x79, 0x43, 0x01, 0x00, 0x00,
}

func (this *WhitelistPriceOracleProposal) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*WhitelistPriceOracleProposal)
	if !ok {
		that2, ok := that.(WhitelistPriceOracleProposal)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *WhitelistPriceOracleProposal")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *WhitelistPriceOracleProposal but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *WhitelistPriceOracleProposal but is not nil && this == nil")
	}
	if this.Title != that1.Title {
		return fmt.Errorf("Title this(%v) Not Equal that(%v)", this.Title, that1.Title)
	}
	if this.Description != that1.Description {
		return fmt.Errorf("Description this(%v) Not Equal that(%v)", this.Description, that1.Description)
	}
	return nil
}
func (this *WhitelistPriceOracleProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhitelistPriceOracleProposal)
	if !ok {
		that2, ok := that.(WhitelistPriceOracleProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (m *WhitelistPriceOracleProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhitelistPriceOracleProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhitelistPriceOracleProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WhitelistPriceOracleProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WhitelistPriceOracleProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhitelistPriceOracleProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhitelistPriceOracleProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)

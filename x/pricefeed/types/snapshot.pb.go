// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pricefeed/snapshot.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// a snapshot of the pricefeed oracle's median price at a given point in time
type PriceSnapshot struct {
	// the median prices of all oracles
	Price github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price"`
	// milliseconds since unix epoch
	TimestampMs int64 `protobuf:"varint,2,opt,name=timestamp_ms,json=timestampMs,proto3" json:"timestamp_ms,omitempty"`
	// the blockHeight at which the snapshot was stored
	BlockHeight int64 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *PriceSnapshot) Reset()         { *m = PriceSnapshot{} }
func (m *PriceSnapshot) String() string { return proto.CompactTextString(m) }
func (*PriceSnapshot) ProtoMessage()    {}
func (*PriceSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecd9dd66f4224020, []int{0}
}
func (m *PriceSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceSnapshot.Merge(m, src)
}
func (m *PriceSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *PriceSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_PriceSnapshot proto.InternalMessageInfo

func (m *PriceSnapshot) GetTimestampMs() int64 {
	if m != nil {
		return m.TimestampMs
	}
	return 0
}

func (m *PriceSnapshot) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*PriceSnapshot)(nil), "nibiru.pricefeed.v1.PriceSnapshot")
}

func init() { proto.RegisterFile("pricefeed/snapshot.proto", fileDescriptor_ecd9dd66f4224020) }

var fileDescriptor_ecd9dd66f4224020 = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x31, 0x4e, 0xc3, 0x30,
	0x18, 0x85, 0x63, 0x2a, 0x90, 0x08, 0xb0, 0x04, 0x86, 0xa8, 0x42, 0x4e, 0x61, 0x40, 0x5d, 0xb0,
	0x85, 0xb8, 0x41, 0xe9, 0xc0, 0x02, 0x82, 0xb2, 0xb1, 0x54, 0x4e, 0xea, 0x3a, 0x56, 0x1b, 0xff,
	0x56, 0xec, 0x20, 0xb8, 0x05, 0x3b, 0x17, 0xe0, 0x28, 0x1d, 0x3b, 0x22, 0x86, 0xaa, 0x24, 0x17,
	0x41, 0x71, 0xa2, 0xc0, 0x64, 0xfb, 0xfd, 0x9f, 0xf5, 0xde, 0xff, 0xfc, 0x50, 0xe7, 0x32, 0xe1,
	0x73, 0xce, 0x67, 0xd4, 0x28, 0xa6, 0x4d, 0x0a, 0x96, 0xe8, 0x1c, 0x2c, 0x04, 0xc7, 0x4a, 0xc6,
	0x32, 0x2f, 0x48, 0x07, 0x90, 0x97, 0xab, 0xfe, 0x89, 0x00, 0x01, 0x6e, 0x4e, 0xeb, 0x5b, 0x83,
	0xf6, 0x23, 0x01, 0x20, 0x96, 0x9c, 0xba, 0x57, 0x5c, 0xcc, 0xa9, 0x95, 0x19, 0x37, 0x96, 0x65,
	0xba, 0x05, 0x4e, 0x5b, 0x80, 0x69, 0x49, 0x99, 0x52, 0x60, 0x99, 0x95, 0xa0, 0x4c, 0x33, 0x3d,
	0xff, 0x40, 0xfe, 0xd1, 0x43, 0xed, 0xf2, 0xd4, 0x26, 0x08, 0xc6, 0xfe, 0xae, 0xb3, 0x0d, 0xd1,
	0x00, 0x0d, 0xf7, 0x47, 0x64, 0xb5, 0x89, 0xbc, 0xef, 0x4d, 0x74, 0x21, 0xa4, 0x4d, 0x8b, 0x98,
	0x24, 0x90, 0xd1, 0x04, 0x4c, 0x06, 0xa6, 0x3d, 0x2e, 0xcd, 0x6c, 0x41, 0xed, 0x9b, 0xe6, 0x86,
	0x8c, 0x79, 0x32, 0x69, 0x3e, 0x07, 0x67, 0xfe, 0x61, 0x17, 0x64, 0x9a, 0x99, 0x70, 0x67, 0x80,
	0x86, 0xbd, 0xc9, 0x41, 0xa7, 0xdd, 0x99, 0x1a, 0x89, 0x97, 0x90, 0x2c, 0xa6, 0x29, 0x97, 0x22,
	0xb5, 0x61, 0xaf, 0x41, 0x9c, 0x76, 0xeb, 0xa4, 0xd1, 0xe3, 0xf6, 0x07, 0xa3, 0xcf, 0x12, 0xa3,
	0x55, 0x89, 0xd1, 0xba, 0xc4, 0x68, 0x5b, 0x62, 0xf4, 0x5e, 0x61, 0x6f, 0x5d, 0x61, 0xef, 0xab,
	0xc2, 0xde, 0x33, 0xfd, 0x17, 0xeb, 0xde, 0x95, 0x76, 0x93, 0x32, 0xa9, 0x68, 0x53, 0x20, 0x7d,
	0xa5, 0x7f, 0x1d, 0xbb, 0x8c, 0xf1, 0x9e, 0xdb, 0xfb, 0xfa, 0x37, 0x00, 0x00, 0xff, 0xff, 0x4a,
	0xcd, 0x78, 0xee, 0x7d, 0x01, 0x00, 0x00,
}

func (this *PriceSnapshot) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PriceSnapshot)
	if !ok {
		that2, ok := that.(PriceSnapshot)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PriceSnapshot")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PriceSnapshot but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PriceSnapshot but is not nil && this == nil")
	}
	if !this.Price.Equal(that1.Price) {
		return fmt.Errorf("Price this(%v) Not Equal that(%v)", this.Price, that1.Price)
	}
	if this.TimestampMs != that1.TimestampMs {
		return fmt.Errorf("TimestampMs this(%v) Not Equal that(%v)", this.TimestampMs, that1.TimestampMs)
	}
	if this.BlockHeight != that1.BlockHeight {
		return fmt.Errorf("BlockHeight this(%v) Not Equal that(%v)", this.BlockHeight, that1.BlockHeight)
	}
	return nil
}
func (this *PriceSnapshot) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PriceSnapshot)
	if !ok {
		that2, ok := that.(PriceSnapshot)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Price.Equal(that1.Price) {
		return false
	}
	if this.TimestampMs != that1.TimestampMs {
		return false
	}
	if this.BlockHeight != that1.BlockHeight {
		return false
	}
	return true
}
func (m *PriceSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriceSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintSnapshot(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.TimestampMs != 0 {
		i = encodeVarintSnapshot(dAtA, i, uint64(m.TimestampMs))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSnapshot(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintSnapshot(dAtA []byte, offset int, v uint64) int {
	offset -= sovSnapshot(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PriceSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovSnapshot(uint64(l))
	if m.TimestampMs != 0 {
		n += 1 + sovSnapshot(uint64(m.TimestampMs))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovSnapshot(uint64(m.BlockHeight))
	}
	return n
}

func sovSnapshot(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSnapshot(x uint64) (n int) {
	return sovSnapshot(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PriceSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampMs", wireType)
			}
			m.TimestampMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSnapshot(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSnapshot
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSnapshot
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSnapshot
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSnapshot        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSnapshot          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSnapshot = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by MockGen. DO NOT EDIT.
// Source: x/perp/types/expected_keepers.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	common "github.com/NibiruChain/nibiru/x/common"
	types "github.com/NibiruChain/nibiru/x/pricefeed/types"
	types0 "github.com/NibiruChain/nibiru/x/vpool/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	types2 "github.com/cosmos/cosmos-sdk/x/auth/types"
	gomock "github.com/golang/mock/gomock"
)

// MockAccountKeeper is a mock of AccountKeeper interface.
type MockAccountKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockAccountKeeperMockRecorder
}

// MockAccountKeeperMockRecorder is the mock recorder for MockAccountKeeper.
type MockAccountKeeperMockRecorder struct {
	mock *MockAccountKeeper
}

// NewMockAccountKeeper creates a new mock instance.
func NewMockAccountKeeper(ctrl *gomock.Controller) *MockAccountKeeper {
	mock := &MockAccountKeeper{ctrl: ctrl}
	mock.recorder = &MockAccountKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountKeeper) EXPECT() *MockAccountKeeperMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockAccountKeeper) GetAccount(ctx types1.Context, addr types1.AccAddress) types2.AccountI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, addr)
	ret0, _ := ret[0].(types2.AccountI)
	return ret0
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountKeeperMockRecorder) GetAccount(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountKeeper)(nil).GetAccount), ctx, addr)
}

// GetModuleAccount mocks base method.
func (m *MockAccountKeeper) GetModuleAccount(ctx types1.Context, moduleName string) types2.ModuleAccountI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleAccount", ctx, moduleName)
	ret0, _ := ret[0].(types2.ModuleAccountI)
	return ret0
}

// GetModuleAccount indicates an expected call of GetModuleAccount.
func (mr *MockAccountKeeperMockRecorder) GetModuleAccount(ctx, moduleName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleAccount", reflect.TypeOf((*MockAccountKeeper)(nil).GetModuleAccount), ctx, moduleName)
}

// GetModuleAddress mocks base method.
func (m *MockAccountKeeper) GetModuleAddress(name string) types1.AccAddress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleAddress", name)
	ret0, _ := ret[0].(types1.AccAddress)
	return ret0
}

// GetModuleAddress indicates an expected call of GetModuleAddress.
func (mr *MockAccountKeeperMockRecorder) GetModuleAddress(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleAddress", reflect.TypeOf((*MockAccountKeeper)(nil).GetModuleAddress), name)
}

// MockBankKeeper is a mock of BankKeeper interface.
type MockBankKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockBankKeeperMockRecorder
}

// MockBankKeeperMockRecorder is the mock recorder for MockBankKeeper.
type MockBankKeeperMockRecorder struct {
	mock *MockBankKeeper
}

// NewMockBankKeeper creates a new mock instance.
func NewMockBankKeeper(ctrl *gomock.Controller) *MockBankKeeper {
	mock := &MockBankKeeper{ctrl: ctrl}
	mock.recorder = &MockBankKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankKeeper) EXPECT() *MockBankKeeperMockRecorder {
	return m.recorder
}

// BurnCoins mocks base method.
func (m *MockBankKeeper) BurnCoins(ctx types1.Context, moduleName string, amt types1.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BurnCoins", ctx, moduleName, amt)
	ret0, _ := ret[0].(error)
	return ret0
}

// BurnCoins indicates an expected call of BurnCoins.
func (mr *MockBankKeeperMockRecorder) BurnCoins(ctx, moduleName, amt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BurnCoins", reflect.TypeOf((*MockBankKeeper)(nil).BurnCoins), ctx, moduleName, amt)
}

// GetAllBalances mocks base method.
func (m *MockBankKeeper) GetAllBalances(ctx types1.Context, addr types1.AccAddress) types1.Coins {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBalances", ctx, addr)
	ret0, _ := ret[0].(types1.Coins)
	return ret0
}

// GetAllBalances indicates an expected call of GetAllBalances.
func (mr *MockBankKeeperMockRecorder) GetAllBalances(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBalances", reflect.TypeOf((*MockBankKeeper)(nil).GetAllBalances), ctx, addr)
}

// GetBalance mocks base method.
func (m *MockBankKeeper) GetBalance(ctx types1.Context, addr types1.AccAddress, denom string) types1.Coin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, addr, denom)
	ret0, _ := ret[0].(types1.Coin)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockBankKeeperMockRecorder) GetBalance(ctx, addr, denom interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockBankKeeper)(nil).GetBalance), ctx, addr, denom)
}

// MintCoins mocks base method.
func (m *MockBankKeeper) MintCoins(ctx types1.Context, moduleName string, amt types1.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MintCoins", ctx, moduleName, amt)
	ret0, _ := ret[0].(error)
	return ret0
}

// MintCoins indicates an expected call of MintCoins.
func (mr *MockBankKeeperMockRecorder) MintCoins(ctx, moduleName, amt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MintCoins", reflect.TypeOf((*MockBankKeeper)(nil).MintCoins), ctx, moduleName, amt)
}

// SendCoinsFromAccountToModule mocks base method.
func (m *MockBankKeeper) SendCoinsFromAccountToModule(ctx types1.Context, senderAddr types1.AccAddress, recipientModule string, amt types1.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoinsFromAccountToModule", ctx, senderAddr, recipientModule, amt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoinsFromAccountToModule indicates an expected call of SendCoinsFromAccountToModule.
func (mr *MockBankKeeperMockRecorder) SendCoinsFromAccountToModule(ctx, senderAddr, recipientModule, amt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoinsFromAccountToModule", reflect.TypeOf((*MockBankKeeper)(nil).SendCoinsFromAccountToModule), ctx, senderAddr, recipientModule, amt)
}

// SendCoinsFromModuleToAccount mocks base method.
func (m *MockBankKeeper) SendCoinsFromModuleToAccount(ctx types1.Context, senderModule string, recipientAddr types1.AccAddress, amt types1.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoinsFromModuleToAccount", ctx, senderModule, recipientAddr, amt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoinsFromModuleToAccount indicates an expected call of SendCoinsFromModuleToAccount.
func (mr *MockBankKeeperMockRecorder) SendCoinsFromModuleToAccount(ctx, senderModule, recipientAddr, amt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoinsFromModuleToAccount", reflect.TypeOf((*MockBankKeeper)(nil).SendCoinsFromModuleToAccount), ctx, senderModule, recipientAddr, amt)
}

// SendCoinsFromModuleToModule mocks base method.
func (m *MockBankKeeper) SendCoinsFromModuleToModule(ctx types1.Context, senderModule, recipientModule string, amt types1.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoinsFromModuleToModule", ctx, senderModule, recipientModule, amt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoinsFromModuleToModule indicates an expected call of SendCoinsFromModuleToModule.
func (mr *MockBankKeeperMockRecorder) SendCoinsFromModuleToModule(ctx, senderModule, recipientModule, amt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoinsFromModuleToModule", reflect.TypeOf((*MockBankKeeper)(nil).SendCoinsFromModuleToModule), ctx, senderModule, recipientModule, amt)
}

// SpendableCoins mocks base method.
func (m *MockBankKeeper) SpendableCoins(ctx types1.Context, addr types1.AccAddress) types1.Coins {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpendableCoins", ctx, addr)
	ret0, _ := ret[0].(types1.Coins)
	return ret0
}

// SpendableCoins indicates an expected call of SpendableCoins.
func (mr *MockBankKeeperMockRecorder) SpendableCoins(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpendableCoins", reflect.TypeOf((*MockBankKeeper)(nil).SpendableCoins), ctx, addr)
}

// MockPricefeedKeeper is a mock of PricefeedKeeper interface.
type MockPricefeedKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockPricefeedKeeperMockRecorder
}

// MockPricefeedKeeperMockRecorder is the mock recorder for MockPricefeedKeeper.
type MockPricefeedKeeperMockRecorder struct {
	mock *MockPricefeedKeeper
}

// NewMockPricefeedKeeper creates a new mock instance.
func NewMockPricefeedKeeper(ctrl *gomock.Controller) *MockPricefeedKeeper {
	mock := &MockPricefeedKeeper{ctrl: ctrl}
	mock.recorder = &MockPricefeedKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPricefeedKeeper) EXPECT() *MockPricefeedKeeperMockRecorder {
	return m.recorder
}

// GatherCurrentPrices mocks base method.
func (m *MockPricefeedKeeper) GatherCurrentPrices(ctx types1.Context, token0, token1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GatherCurrentPrices", ctx, token0, token1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GatherCurrentPrices indicates an expected call of GatherCurrentPrices.
func (mr *MockPricefeedKeeperMockRecorder) GatherCurrentPrices(ctx, token0, token1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GatherCurrentPrices", reflect.TypeOf((*MockPricefeedKeeper)(nil).GatherCurrentPrices), ctx, token0, token1)
}

// GetCurrentPrice mocks base method.
func (m *MockPricefeedKeeper) GetCurrentPrice(ctx types1.Context, token0, token1 string) (types.CurrentPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentPrice", ctx, token0, token1)
	ret0, _ := ret[0].(types.CurrentPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentPrice indicates an expected call of GetCurrentPrice.
func (mr *MockPricefeedKeeperMockRecorder) GetCurrentPrice(ctx, token0, token1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentPrice", reflect.TypeOf((*MockPricefeedKeeper)(nil).GetCurrentPrice), ctx, token0, token1)
}

// GetCurrentPrices mocks base method.
func (m *MockPricefeedKeeper) GetCurrentPrices(ctx types1.Context) types.CurrentPrices {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentPrices", ctx)
	ret0, _ := ret[0].(types.CurrentPrices)
	return ret0
}

// GetCurrentPrices indicates an expected call of GetCurrentPrices.
func (mr *MockPricefeedKeeperMockRecorder) GetCurrentPrices(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentPrices", reflect.TypeOf((*MockPricefeedKeeper)(nil).GetCurrentPrices), ctx)
}

// GetOracle mocks base method.
func (m *MockPricefeedKeeper) GetOracle(ctx types1.Context, pairID string, address types1.AccAddress) (types1.AccAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOracle", ctx, pairID, address)
	ret0, _ := ret[0].(types1.AccAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOracle indicates an expected call of GetOracle.
func (mr *MockPricefeedKeeperMockRecorder) GetOracle(ctx, pairID, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOracle", reflect.TypeOf((*MockPricefeedKeeper)(nil).GetOracle), ctx, pairID, address)
}

// GetOracles mocks base method.
func (m *MockPricefeedKeeper) GetOracles(ctx types1.Context, pairID string) ([]types1.AccAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOracles", ctx, pairID)
	ret0, _ := ret[0].([]types1.AccAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOracles indicates an expected call of GetOracles.
func (mr *MockPricefeedKeeperMockRecorder) GetOracles(ctx, pairID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOracles", reflect.TypeOf((*MockPricefeedKeeper)(nil).GetOracles), ctx, pairID)
}

// GetPair mocks base method.
func (m *MockPricefeedKeeper) GetPair(ctx types1.Context, pairID string) (types.Pair, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPair", ctx, pairID)
	ret0, _ := ret[0].(types.Pair)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPair indicates an expected call of GetPair.
func (mr *MockPricefeedKeeperMockRecorder) GetPair(ctx, pairID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPair", reflect.TypeOf((*MockPricefeedKeeper)(nil).GetPair), ctx, pairID)
}

// GetPairs mocks base method.
func (m *MockPricefeedKeeper) GetPairs(ctx types1.Context) types.Pairs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPairs", ctx)
	ret0, _ := ret[0].(types.Pairs)
	return ret0
}

// GetPairs indicates an expected call of GetPairs.
func (mr *MockPricefeedKeeperMockRecorder) GetPairs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPairs", reflect.TypeOf((*MockPricefeedKeeper)(nil).GetPairs), ctx)
}

// GetRawPrices mocks base method.
func (m *MockPricefeedKeeper) GetRawPrices(ctx types1.Context, marketId string) types.PostedPrices {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawPrices", ctx, marketId)
	ret0, _ := ret[0].(types.PostedPrices)
	return ret0
}

// GetRawPrices indicates an expected call of GetRawPrices.
func (mr *MockPricefeedKeeperMockRecorder) GetRawPrices(ctx, marketId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawPrices", reflect.TypeOf((*MockPricefeedKeeper)(nil).GetRawPrices), ctx, marketId)
}

// MockVpoolKeeper is a mock of VpoolKeeper interface.
type MockVpoolKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockVpoolKeeperMockRecorder
}

// MockVpoolKeeperMockRecorder is the mock recorder for MockVpoolKeeper.
type MockVpoolKeeperMockRecorder struct {
	mock *MockVpoolKeeper
}

// NewMockVpoolKeeper creates a new mock instance.
func NewMockVpoolKeeper(ctrl *gomock.Controller) *MockVpoolKeeper {
	mock := &MockVpoolKeeper{ctrl: ctrl}
	mock.recorder = &MockVpoolKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVpoolKeeper) EXPECT() *MockVpoolKeeperMockRecorder {
	return m.recorder
}

// ExistsPool mocks base method.
func (m *MockVpoolKeeper) ExistsPool(ctx types1.Context, pair common.AssetPair) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsPool", ctx, pair)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExistsPool indicates an expected call of ExistsPool.
func (mr *MockVpoolKeeperMockRecorder) ExistsPool(ctx, pair interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsPool", reflect.TypeOf((*MockVpoolKeeper)(nil).ExistsPool), ctx, pair)
}

// GetBaseAssetPrice mocks base method.
func (m *MockVpoolKeeper) GetBaseAssetPrice(ctx types1.Context, pair common.AssetPair, direction types0.Direction, baseAssetAmount types1.Dec) (types1.Dec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseAssetPrice", ctx, pair, direction, baseAssetAmount)
	ret0, _ := ret[0].(types1.Dec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaseAssetPrice indicates an expected call of GetBaseAssetPrice.
func (mr *MockVpoolKeeperMockRecorder) GetBaseAssetPrice(ctx, pair, direction, baseAssetAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseAssetPrice", reflect.TypeOf((*MockVpoolKeeper)(nil).GetBaseAssetPrice), ctx, pair, direction, baseAssetAmount)
}

// GetBaseAssetTWAP mocks base method.
func (m *MockVpoolKeeper) GetBaseAssetTWAP(ctx types1.Context, pair common.AssetPair, direction types0.Direction, baseAssetAmount types1.Dec, lookbackInterval time.Duration) (types1.Dec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseAssetTWAP", ctx, pair, direction, baseAssetAmount, lookbackInterval)
	ret0, _ := ret[0].(types1.Dec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaseAssetTWAP indicates an expected call of GetBaseAssetTWAP.
func (mr *MockVpoolKeeperMockRecorder) GetBaseAssetTWAP(ctx, pair, direction, baseAssetAmount, lookbackInterval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseAssetTWAP", reflect.TypeOf((*MockVpoolKeeper)(nil).GetBaseAssetTWAP), ctx, pair, direction, baseAssetAmount, lookbackInterval)
}

// GetQuoteAssetPrice mocks base method.
func (m *MockVpoolKeeper) GetQuoteAssetPrice(ctx types1.Context, pair common.AssetPair, dir types0.Direction, quoteAmount types1.Dec) (types1.Dec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuoteAssetPrice", ctx, pair, dir, quoteAmount)
	ret0, _ := ret[0].(types1.Dec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuoteAssetPrice indicates an expected call of GetQuoteAssetPrice.
func (mr *MockVpoolKeeperMockRecorder) GetQuoteAssetPrice(ctx, pair, dir, quoteAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuoteAssetPrice", reflect.TypeOf((*MockVpoolKeeper)(nil).GetQuoteAssetPrice), ctx, pair, dir, quoteAmount)
}

// GetQuoteAssetTWAP mocks base method.
func (m *MockVpoolKeeper) GetQuoteAssetTWAP(ctx types1.Context, pair common.AssetPair, direction types0.Direction, quoteAssetAmount types1.Dec, lookbackInterval time.Duration) (types1.Dec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuoteAssetTWAP", ctx, pair, direction, quoteAssetAmount, lookbackInterval)
	ret0, _ := ret[0].(types1.Dec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuoteAssetTWAP indicates an expected call of GetQuoteAssetTWAP.
func (mr *MockVpoolKeeperMockRecorder) GetQuoteAssetTWAP(ctx, pair, direction, quoteAssetAmount, lookbackInterval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuoteAssetTWAP", reflect.TypeOf((*MockVpoolKeeper)(nil).GetQuoteAssetTWAP), ctx, pair, direction, quoteAssetAmount, lookbackInterval)
}

// GetSettlementPrice mocks base method.
func (m *MockVpoolKeeper) GetSettlementPrice(ctx types1.Context, pair common.AssetPair) (types1.Dec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettlementPrice", ctx, pair)
	ret0, _ := ret[0].(types1.Dec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettlementPrice indicates an expected call of GetSettlementPrice.
func (mr *MockVpoolKeeperMockRecorder) GetSettlementPrice(ctx, pair interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettlementPrice", reflect.TypeOf((*MockVpoolKeeper)(nil).GetSettlementPrice), ctx, pair)
}

// GetSpotPrice mocks base method.
func (m *MockVpoolKeeper) GetSpotPrice(ctx types1.Context, pair common.AssetPair) (types1.Dec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpotPrice", ctx, pair)
	ret0, _ := ret[0].(types1.Dec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpotPrice indicates an expected call of GetSpotPrice.
func (mr *MockVpoolKeeperMockRecorder) GetSpotPrice(ctx, pair interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpotPrice", reflect.TypeOf((*MockVpoolKeeper)(nil).GetSpotPrice), ctx, pair)
}

// GetUnderlyingPrice mocks base method.
func (m *MockVpoolKeeper) GetUnderlyingPrice(ctx types1.Context, pair common.AssetPair) (types1.Dec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnderlyingPrice", ctx, pair)
	ret0, _ := ret[0].(types1.Dec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnderlyingPrice indicates an expected call of GetUnderlyingPrice.
func (mr *MockVpoolKeeperMockRecorder) GetUnderlyingPrice(ctx, pair interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnderlyingPrice", reflect.TypeOf((*MockVpoolKeeper)(nil).GetUnderlyingPrice), ctx, pair)
}

// IsOverSpreadLimit mocks base method.
func (m *MockVpoolKeeper) IsOverSpreadLimit(ctx types1.Context, pair common.AssetPair) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOverSpreadLimit", ctx, pair)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOverSpreadLimit indicates an expected call of IsOverSpreadLimit.
func (mr *MockVpoolKeeperMockRecorder) IsOverSpreadLimit(ctx, pair interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOverSpreadLimit", reflect.TypeOf((*MockVpoolKeeper)(nil).IsOverSpreadLimit), ctx, pair)
}

// SwapBaseForQuote mocks base method.
func (m *MockVpoolKeeper) SwapBaseForQuote(ctx types1.Context, pair common.AssetPair, dir types0.Direction, abs, limit types1.Dec) (types1.Dec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwapBaseForQuote", ctx, pair, dir, abs, limit)
	ret0, _ := ret[0].(types1.Dec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwapBaseForQuote indicates an expected call of SwapBaseForQuote.
func (mr *MockVpoolKeeperMockRecorder) SwapBaseForQuote(ctx, pair, dir, abs, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwapBaseForQuote", reflect.TypeOf((*MockVpoolKeeper)(nil).SwapBaseForQuote), ctx, pair, dir, abs, limit)
}

// SwapQuoteForBase mocks base method.
func (m *MockVpoolKeeper) SwapQuoteForBase(ctx types1.Context, pair common.AssetPair, dir types0.Direction, quoteAssetAmount, baseAmountLimit types1.Dec) (types1.Dec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwapQuoteForBase", ctx, pair, dir, quoteAssetAmount, baseAmountLimit)
	ret0, _ := ret[0].(types1.Dec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwapQuoteForBase indicates an expected call of SwapQuoteForBase.
func (mr *MockVpoolKeeperMockRecorder) SwapQuoteForBase(ctx, pair, dir, quoteAssetAmount, baseAmountLimit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwapQuoteForBase", reflect.TypeOf((*MockVpoolKeeper)(nil).SwapQuoteForBase), ctx, pair, dir, quoteAssetAmount, baseAmountLimit)
}

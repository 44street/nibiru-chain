// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nibiru/oracle/v1/event.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Emitted when a price is posted
type EventExchangeRateUpdate struct {
	Pair         string                                 `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	ExchangeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=exchange_rate,json=exchangeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"exchange_rate"`
	TimestampMs  int64                                  `protobuf:"varint,3,opt,name=timestamp_ms,json=timestampMs,proto3" json:"timestamp_ms,omitempty"`
}

func (m *EventExchangeRateUpdate) Reset()         { *m = EventExchangeRateUpdate{} }
func (m *EventExchangeRateUpdate) String() string { return proto.CompactTextString(m) }
func (*EventExchangeRateUpdate) ProtoMessage()    {}
func (*EventExchangeRateUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_94ec441b793fc0ea, []int{0}
}
func (m *EventExchangeRateUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventExchangeRateUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventExchangeRateUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventExchangeRateUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventExchangeRateUpdate.Merge(m, src)
}
func (m *EventExchangeRateUpdate) XXX_Size() int {
	return m.Size()
}
func (m *EventExchangeRateUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventExchangeRateUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_EventExchangeRateUpdate proto.InternalMessageInfo

func (m *EventExchangeRateUpdate) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *EventExchangeRateUpdate) GetTimestampMs() int64 {
	if m != nil {
		return m.TimestampMs
	}
	return 0
}

// Emitted when a valoper delegates oracle voting rights to a feeder address.
type EventDelegateFeederConsent struct {
	// Validator is the Bech32 address that is delegating voting rights.
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	// Feeder is the delegate or representative that will be able to send
	// vote and prevote transaction messages.
	Feeder string `protobuf:"bytes,2,opt,name=feeder,proto3" json:"feeder,omitempty"`
}

func (m *EventDelegateFeederConsent) Reset()         { *m = EventDelegateFeederConsent{} }
func (m *EventDelegateFeederConsent) String() string { return proto.CompactTextString(m) }
func (*EventDelegateFeederConsent) ProtoMessage()    {}
func (*EventDelegateFeederConsent) Descriptor() ([]byte, []int) {
	return fileDescriptor_94ec441b793fc0ea, []int{1}
}
func (m *EventDelegateFeederConsent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDelegateFeederConsent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDelegateFeederConsent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDelegateFeederConsent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDelegateFeederConsent.Merge(m, src)
}
func (m *EventDelegateFeederConsent) XXX_Size() int {
	return m.Size()
}
func (m *EventDelegateFeederConsent) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDelegateFeederConsent.DiscardUnknown(m)
}

var xxx_messageInfo_EventDelegateFeederConsent proto.InternalMessageInfo

func (m *EventDelegateFeederConsent) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *EventDelegateFeederConsent) GetFeeder() string {
	if m != nil {
		return m.Feeder
	}
	return ""
}

// Emitted by MsgAggregateExchangeVote when an aggregate vote is added to state
type EventAggregateVote struct {
	// Validator is the Bech32 address to which the vote will be credited.
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	// Feeder is the delegate or representative that will sends vote and prevote
	// transaction messages on behalf of the voting validator.
	Feeder        string `protobuf:"bytes,2,opt,name=feeder,proto3" json:"feeder,omitempty"`
	ExchangeRates string `protobuf:"bytes,3,opt,name=exchange_rates,json=exchangeRates,proto3" json:"exchange_rates,omitempty" yaml:"exchange_rates"`
}

func (m *EventAggregateVote) Reset()         { *m = EventAggregateVote{} }
func (m *EventAggregateVote) String() string { return proto.CompactTextString(m) }
func (*EventAggregateVote) ProtoMessage()    {}
func (*EventAggregateVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_94ec441b793fc0ea, []int{2}
}
func (m *EventAggregateVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAggregateVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAggregateVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAggregateVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAggregateVote.Merge(m, src)
}
func (m *EventAggregateVote) XXX_Size() int {
	return m.Size()
}
func (m *EventAggregateVote) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAggregateVote.DiscardUnknown(m)
}

var xxx_messageInfo_EventAggregateVote proto.InternalMessageInfo

func (m *EventAggregateVote) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *EventAggregateVote) GetFeeder() string {
	if m != nil {
		return m.Feeder
	}
	return ""
}

func (m *EventAggregateVote) GetExchangeRates() string {
	if m != nil {
		return m.ExchangeRates
	}
	return ""
}

// Emitted by MsgAggregateExchangePrevote when an aggregate prevote is added
// to state
type EventAggregatePrevote struct {
	// Validator is the Bech32 address to which the vote will be credited.
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	// Feeder is the delegate or representative that will sends vote and prevote
	// transaction messages on behalf of the voting validator.
	Feeder string `protobuf:"bytes,2,opt,name=feeder,proto3" json:"feeder,omitempty"`
}

func (m *EventAggregatePrevote) Reset()         { *m = EventAggregatePrevote{} }
func (m *EventAggregatePrevote) String() string { return proto.CompactTextString(m) }
func (*EventAggregatePrevote) ProtoMessage()    {}
func (*EventAggregatePrevote) Descriptor() ([]byte, []int) {
	return fileDescriptor_94ec441b793fc0ea, []int{3}
}
func (m *EventAggregatePrevote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAggregatePrevote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAggregatePrevote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAggregatePrevote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAggregatePrevote.Merge(m, src)
}
func (m *EventAggregatePrevote) XXX_Size() int {
	return m.Size()
}
func (m *EventAggregatePrevote) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAggregatePrevote.DiscardUnknown(m)
}

var xxx_messageInfo_EventAggregatePrevote proto.InternalMessageInfo

func (m *EventAggregatePrevote) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *EventAggregatePrevote) GetFeeder() string {
	if m != nil {
		return m.Feeder
	}
	return ""
}

func init() {
	proto.RegisterType((*EventExchangeRateUpdate)(nil), "nibiru.oracle.v1.EventExchangeRateUpdate")
	proto.RegisterType((*EventDelegateFeederConsent)(nil), "nibiru.oracle.v1.EventDelegateFeederConsent")
	proto.RegisterType((*EventAggregateVote)(nil), "nibiru.oracle.v1.EventAggregateVote")
	proto.RegisterType((*EventAggregatePrevote)(nil), "nibiru.oracle.v1.EventAggregatePrevote")
}

func init() { proto.RegisterFile("nibiru/oracle/v1/event.proto", fileDescriptor_94ec441b793fc0ea) }

var fileDescriptor_94ec441b793fc0ea = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xcd, 0xae, 0x12, 0x31,
	0x14, 0x9e, 0x7a, 0xcd, 0x4d, 0xa8, 0xf7, 0x1a, 0xd3, 0x88, 0x22, 0x21, 0x03, 0xce, 0xc2, 0xb0,
	0xd0, 0x69, 0x88, 0x3b, 0x57, 0xca, 0xdf, 0x0e, 0x63, 0xc6, 0xe8, 0xc2, 0x0d, 0x29, 0x33, 0xc7,
	0xd2, 0x38, 0xd3, 0x4e, 0xda, 0x32, 0x81, 0x77, 0x70, 0xe1, 0x4b, 0xf8, 0x2e, 0x2c, 0x59, 0x1a,
	0x17, 0xc4, 0xc0, 0x1b, 0xf8, 0x04, 0x86, 0xce, 0xe0, 0x85, 0x2d, 0xab, 0x9e, 0x9e, 0xef, 0xcb,
	0xd7, 0xaf, 0xe7, 0x7c, 0xb8, 0x25, 0xc5, 0x4c, 0xe8, 0x05, 0x55, 0x9a, 0xc5, 0x29, 0xd0, 0xa2,
	0x47, 0xa1, 0x00, 0x69, 0xc3, 0x5c, 0x2b, 0xab, 0xc8, 0xa3, 0x12, 0x0d, 0x4b, 0x34, 0x2c, 0x7a,
	0xcd, 0xc7, 0x5c, 0x71, 0xe5, 0x40, 0x7a, 0xa8, 0x4a, 0x5e, 0xb3, 0xc5, 0x95, 0xe2, 0x29, 0x50,
	0x96, 0x0b, 0xca, 0xa4, 0x54, 0x96, 0x59, 0xa1, 0xa4, 0x29, 0xd1, 0xe0, 0x27, 0xc2, 0x4f, 0x47,
	0x07, 0xd5, 0xd1, 0x32, 0x9e, 0x33, 0xc9, 0x21, 0x62, 0x16, 0x3e, 0xe5, 0x09, 0xb3, 0x40, 0x08,
	0xbe, 0x9f, 0x33, 0xa1, 0x1b, 0xa8, 0x83, 0xba, 0xb5, 0xc8, 0xd5, 0xe4, 0x23, 0xbe, 0x85, 0x8a,
	0x39, 0xd5, 0xcc, 0x42, 0xe3, 0xde, 0x01, 0xec, 0x87, 0xeb, 0x6d, 0xdb, 0xfb, 0xbd, 0x6d, 0xbf,
	0xe0, 0xc2, 0xce, 0x17, 0xb3, 0x30, 0x56, 0x19, 0x8d, 0x95, 0xc9, 0x94, 0xa9, 0x8e, 0x57, 0x26,
	0xf9, 0x46, 0xed, 0x2a, 0x07, 0x13, 0x0e, 0x21, 0x8e, 0x6e, 0xe0, 0xe4, 0x39, 0xf2, 0x1c, 0xdf,
	0x58, 0x91, 0x81, 0xb1, 0x2c, 0xcb, 0xa7, 0x99, 0x69, 0x5c, 0x75, 0x50, 0xf7, 0x2a, 0x7a, 0xf0,
	0xbf, 0x37, 0x31, 0x41, 0x84, 0x9b, 0xce, 0xe6, 0x10, 0x52, 0xe0, 0xcc, 0xc2, 0x18, 0x20, 0x01,
	0x3d, 0x50, 0xd2, 0x80, 0xb4, 0xa4, 0x85, 0x6b, 0x05, 0x4b, 0x45, 0xc2, 0xac, 0x3a, 0xda, 0xbd,
	0x6b, 0x90, 0x27, 0xf8, 0xfa, 0xab, 0xa3, 0x97, 0x66, 0xa3, 0xea, 0x16, 0x7c, 0x47, 0x98, 0x38,
	0xd1, 0x77, 0x9c, 0x6b, 0xa7, 0xfa, 0x59, 0x59, 0xb8, 0x4c, 0x8c, 0xbc, 0xc5, 0x0f, 0xcf, 0x06,
	0x53, 0xfe, 0xa2, 0xd6, 0x7f, 0xf6, 0x77, 0xdb, 0xae, 0xaf, 0x58, 0x96, 0xbe, 0x09, 0xce, 0xf1,
	0x20, 0xba, 0x3d, 0x1d, 0x82, 0x09, 0x26, 0xb8, 0x7e, 0xee, 0xe6, 0x83, 0x86, 0xe2, 0x62, 0x43,
	0xfd, 0xf1, 0x7a, 0xe7, 0xa3, 0xcd, 0xce, 0x47, 0x7f, 0x76, 0x3e, 0xfa, 0xb1, 0xf7, 0xbd, 0xcd,
	0xde, 0xf7, 0x7e, 0xed, 0x7d, 0xef, 0xcb, 0xcb, 0x93, 0x25, 0xbd, 0x77, 0x21, 0x1a, 0xcc, 0x99,
	0x90, 0xb4, 0x8a, 0xdb, 0xf2, 0x18, 0x38, 0xb7, 0xae, 0xd9, 0xb5, 0x0b, 0xca, 0xeb, 0x7f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xc8, 0x26, 0xa5, 0x2c, 0x8e, 0x02, 0x00, 0x00,
}

func (m *EventExchangeRateUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventExchangeRateUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventExchangeRateUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimestampMs != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.TimestampMs))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.ExchangeRate.Size()
		i -= size
		if _, err := m.ExchangeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Pair) > 0 {
		i -= len(m.Pair)
		copy(dAtA[i:], m.Pair)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Pair)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventDelegateFeederConsent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDelegateFeederConsent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDelegateFeederConsent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Feeder) > 0 {
		i -= len(m.Feeder)
		copy(dAtA[i:], m.Feeder)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Feeder)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAggregateVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAggregateVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAggregateVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExchangeRates) > 0 {
		i -= len(m.ExchangeRates)
		copy(dAtA[i:], m.ExchangeRates)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ExchangeRates)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Feeder) > 0 {
		i -= len(m.Feeder)
		copy(dAtA[i:], m.Feeder)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Feeder)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAggregatePrevote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAggregatePrevote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAggregatePrevote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Feeder) > 0 {
		i -= len(m.Feeder)
		copy(dAtA[i:], m.Feeder)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Feeder)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventExchangeRateUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pair)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = m.ExchangeRate.Size()
	n += 1 + l + sovEvent(uint64(l))
	if m.TimestampMs != 0 {
		n += 1 + sovEvent(uint64(m.TimestampMs))
	}
	return n
}

func (m *EventDelegateFeederConsent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Feeder)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventAggregateVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Feeder)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ExchangeRates)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventAggregatePrevote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Feeder)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventExchangeRateUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventExchangeRateUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventExchangeRateUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pair = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampMs", wireType)
			}
			m.TimestampMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDelegateFeederConsent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDelegateFeederConsent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDelegateFeederConsent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feeder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feeder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAggregateVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAggregateVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAggregateVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feeder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feeder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRates", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeRates = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAggregatePrevote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAggregatePrevote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAggregatePrevote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feeder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feeder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)

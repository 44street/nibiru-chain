// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: amm/amm.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Direction int32

const (
	Direction_UNDEFINED       Direction = 0
	Direction_ADD_TO_AMM      Direction = 1
	Direction_REMOVE_FROM_AMM Direction = 2
)

var Direction_name = map[int32]string{
	0: "UNDEFINED",
	1: "ADD_TO_AMM",
	2: "REMOVE_FROM_AMM",
}

var Direction_value = map[string]int32{
	"UNDEFINED":       0,
	"ADD_TO_AMM":      1,
	"REMOVE_FROM_AMM": 2,
}

func (x Direction) String() string {
	return proto.EnumName(Direction_name, int32(x))
}

func (Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4b07d20e6d863e9f, []int{0}
}

type Pool struct {
	Pair string `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	// ratio applied to reserves in order not to over trade
	TradeLimitRatio   string `protobuf:"bytes,2,opt,name=trade_limit_ratio,json=tradeLimitRatio,proto3" json:"trade_limit_ratio,omitempty"`
	QuoteAssetReserve string `protobuf:"bytes,3,opt,name=quote_asset_reserve,json=quoteAssetReserve,proto3" json:"quote_asset_reserve,omitempty"`
	BaseAssetReserve  string `protobuf:"bytes,4,opt,name=base_asset_reserve,json=baseAssetReserve,proto3" json:"base_asset_reserve,omitempty"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b07d20e6d863e9f, []int{0}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func (m *Pool) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *Pool) GetTradeLimitRatio() string {
	if m != nil {
		return m.TradeLimitRatio
	}
	return ""
}

func (m *Pool) GetQuoteAssetReserve() string {
	if m != nil {
		return m.QuoteAssetReserve
	}
	return ""
}

func (m *Pool) GetBaseAssetReserve() string {
	if m != nil {
		return m.BaseAssetReserve
	}
	return ""
}

func init() {
	proto.RegisterEnum("matrix.amm.v1.Direction", Direction_name, Direction_value)
	proto.RegisterType((*Pool)(nil), "matrix.amm.v1.Pool")
}

func init() { proto.RegisterFile("amm/amm.proto", fileDescriptor_4b07d20e6d863e9f) }

var fileDescriptor_4b07d20e6d863e9f = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xc1, 0x4a, 0xc3, 0x30,
	0x00, 0x86, 0x9b, 0x59, 0x84, 0x06, 0xea, 0xba, 0xec, 0xd2, 0x53, 0x10, 0x4f, 0x63, 0x48, 0x8b,
	0xf8, 0x00, 0xd2, 0x91, 0x0e, 0x04, 0xbb, 0x4a, 0x51, 0x0f, 0x5e, 0x42, 0x3a, 0x83, 0x06, 0x16,
	0x53, 0xd3, 0xac, 0xcc, 0xb7, 0xf0, 0x21, 0x7c, 0x18, 0x8f, 0x3b, 0x7a, 0x94, 0xf6, 0x45, 0x24,
	0xd9, 0x45, 0xbc, 0xfd, 0xfc, 0xdf, 0x77, 0xfa, 0x60, 0xc8, 0xa4, 0x4c, 0x99, 0x94, 0x49, 0xa3,
	0x95, 0x51, 0x28, 0x94, 0xcc, 0x68, 0xb1, 0x4b, 0xec, 0xd3, 0x5d, 0x9c, 0x7d, 0x02, 0xe8, 0xdf,
	0x2a, 0xb5, 0x41, 0x08, 0xfa, 0x0d, 0x13, 0x3a, 0x06, 0xa7, 0x60, 0x16, 0x54, 0x6e, 0xa3, 0x39,
	0x9c, 0x18, 0xcd, 0x9e, 0x38, 0xdd, 0x08, 0x29, 0x0c, 0xd5, 0xcc, 0x08, 0x15, 0x8f, 0x9c, 0x30,
	0x76, 0xe0, 0xc6, 0xfe, 0x95, 0xbd, 0x51, 0x02, 0xa7, 0x6f, 0x5b, 0x65, 0x38, 0x65, 0x6d, 0xcb,
	0x0d, 0xd5, 0xbc, 0xe5, 0xba, 0xe3, 0xf1, 0x91, 0xb3, 0x27, 0x0e, 0x65, 0x96, 0x54, 0x07, 0x80,
	0xce, 0x21, 0xaa, 0x59, 0xfb, 0x5f, 0xf7, 0x9d, 0x1e, 0x59, 0xf2, 0xd7, 0x9e, 0x5f, 0xc1, 0x80,
	0x08, 0xcd, 0xd7, 0x46, 0xa8, 0x57, 0x14, 0xc2, 0xe0, 0x7e, 0x45, 0xf2, 0xe5, 0xf5, 0x2a, 0x27,
	0x91, 0x87, 0x4e, 0x20, 0xcc, 0x08, 0xa1, 0x77, 0x25, 0xcd, 0x8a, 0x22, 0x02, 0x68, 0x0a, 0xc7,
	0x55, 0x5e, 0x94, 0x0f, 0x39, 0x5d, 0x56, 0x65, 0xe1, 0xce, 0xd1, 0x62, 0xf1, 0xd5, 0x63, 0xb0,
	0xef, 0x31, 0xf8, 0xe9, 0x31, 0xf8, 0x18, 0xb0, 0xb7, 0x1f, 0xb0, 0xf7, 0x3d, 0x60, 0xef, 0x71,
	0xf6, 0x2c, 0xcc, 0xcb, 0xb6, 0x4e, 0xd6, 0x4a, 0xa6, 0x85, 0x6b, 0x43, 0x98, 0x4a, 0x0f, 0x95,
	0xd2, 0x5d, 0xda, 0xd9, 0x7c, 0xe6, 0xbd, 0xe1, 0x6d, 0x7d, 0xec, 0x0a, 0x5e, 0xfe, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x36, 0xe6, 0x63, 0x2a, 0x52, 0x01, 0x00, 0x00,
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BaseAssetReserve) > 0 {
		i -= len(m.BaseAssetReserve)
		copy(dAtA[i:], m.BaseAssetReserve)
		i = encodeVarintAmm(dAtA, i, uint64(len(m.BaseAssetReserve)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.QuoteAssetReserve) > 0 {
		i -= len(m.QuoteAssetReserve)
		copy(dAtA[i:], m.QuoteAssetReserve)
		i = encodeVarintAmm(dAtA, i, uint64(len(m.QuoteAssetReserve)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TradeLimitRatio) > 0 {
		i -= len(m.TradeLimitRatio)
		copy(dAtA[i:], m.TradeLimitRatio)
		i = encodeVarintAmm(dAtA, i, uint64(len(m.TradeLimitRatio)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pair) > 0 {
		i -= len(m.Pair)
		copy(dAtA[i:], m.Pair)
		i = encodeVarintAmm(dAtA, i, uint64(len(m.Pair)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAmm(dAtA []byte, offset int, v uint64) int {
	offset -= sovAmm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pair)
	if l > 0 {
		n += 1 + l + sovAmm(uint64(l))
	}
	l = len(m.TradeLimitRatio)
	if l > 0 {
		n += 1 + l + sovAmm(uint64(l))
	}
	l = len(m.QuoteAssetReserve)
	if l > 0 {
		n += 1 + l + sovAmm(uint64(l))
	}
	l = len(m.BaseAssetReserve)
	if l > 0 {
		n += 1 + l + sovAmm(uint64(l))
	}
	return n
}

func sovAmm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAmm(x uint64) (n int) {
	return sovAmm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pair = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeLimitRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeLimitRatio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteAssetReserve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteAssetReserve = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAssetReserve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseAssetReserve = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAmm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAmm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAmm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAmm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAmm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAmm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAmm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAmm = fmt.Errorf("proto: unexpected end of group")
)

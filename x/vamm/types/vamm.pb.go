// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vamm/vamm.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Direction int32

const (
	Direction_UNDEFINED       Direction = 0
	Direction_ADD_TO_AMM      Direction = 1
	Direction_REMOVE_FROM_AMM Direction = 2
)

var Direction_name = map[int32]string{
	0: "UNDEFINED",
	1: "ADD_TO_AMM",
	2: "REMOVE_FROM_AMM",
}

var Direction_value = map[string]int32{
	"UNDEFINED":       0,
	"ADD_TO_AMM":      1,
	"REMOVE_FROM_AMM": 2,
}

func (x Direction) String() string {
	return proto.EnumName(Direction_name, int32(x))
}

func (Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2805e59046d9e8d8, []int{0}
}

type Pool struct {
	Pair string `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	// ratio applied to reserves in order not to over trade
	TradeLimitRatio   string `protobuf:"bytes,2,opt,name=trade_limit_ratio,json=tradeLimitRatio,proto3" json:"trade_limit_ratio,omitempty"`
	QuoteAssetReserve string `protobuf:"bytes,3,opt,name=quote_asset_reserve,json=quoteAssetReserve,proto3" json:"quote_asset_reserve,omitempty"`
	BaseAssetReserve  string `protobuf:"bytes,4,opt,name=base_asset_reserve,json=baseAssetReserve,proto3" json:"base_asset_reserve,omitempty"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_2805e59046d9e8d8, []int{0}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func (m *Pool) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *Pool) GetTradeLimitRatio() string {
	if m != nil {
		return m.TradeLimitRatio
	}
	return ""
}

func (m *Pool) GetQuoteAssetReserve() string {
	if m != nil {
		return m.QuoteAssetReserve
	}
	return ""
}

func (m *Pool) GetBaseAssetReserve() string {
	if m != nil {
		return m.BaseAssetReserve
	}
	return ""
}

func init() {
	proto.RegisterEnum("matrix.amm.v1.Direction", Direction_name, Direction_value)
	proto.RegisterType((*Pool)(nil), "matrix.amm.v1.Pool")
}

func init() { proto.RegisterFile("vamm/vamm.proto", fileDescriptor_2805e59046d9e8d8) }

var fileDescriptor_2805e59046d9e8d8 = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xc1, 0x4a, 0xc3, 0x30,
	0x18, 0xc7, 0x9b, 0x39, 0x84, 0x7d, 0x30, 0xdb, 0x65, 0x97, 0x9e, 0x82, 0x78, 0x1a, 0x43, 0x5a,
	0xc4, 0x07, 0x90, 0x8e, 0x74, 0x20, 0xd8, 0x55, 0x8a, 0x7a, 0xf0, 0x12, 0xd2, 0x19, 0x34, 0xb0,
	0x9a, 0x9a, 0x66, 0x65, 0xbe, 0x85, 0x0f, 0xe1, 0xc3, 0x78, 0xdc, 0xd1, 0xa3, 0xb4, 0x2f, 0x22,
	0xc9, 0x2e, 0xe2, 0xe5, 0xe3, 0xe3, 0xff, 0xfb, 0x9d, 0x7e, 0xe0, 0xb7, 0xbc, 0xaa, 0x62, 0x7b,
	0xa2, 0x5a, 0x2b, 0xa3, 0xf0, 0xb8, 0xe2, 0x46, 0xcb, 0x5d, 0x64, 0x97, 0xf6, 0xe2, 0xec, 0x13,
	0xc1, 0xf0, 0x56, 0xa9, 0x0d, 0xc6, 0x30, 0xac, 0xb9, 0xd4, 0x21, 0x3a, 0x45, 0xb3, 0x51, 0xe1,
	0x7e, 0x3c, 0x87, 0x89, 0xd1, 0xfc, 0x49, 0xb0, 0x8d, 0xac, 0xa4, 0x61, 0x9a, 0x1b, 0xa9, 0xc2,
	0x81, 0x13, 0x7c, 0x07, 0x6e, 0xec, 0x5e, 0xd8, 0x19, 0x47, 0x30, 0x7d, 0xdb, 0x2a, 0x23, 0x18,
	0x6f, 0x1a, 0x61, 0x98, 0x16, 0x8d, 0xd0, 0xad, 0x08, 0x8f, 0x9c, 0x3d, 0x71, 0x28, 0xb1, 0xa4,
	0x38, 0x00, 0x7c, 0x0e, 0xb8, 0xe4, 0xcd, 0x7f, 0x7d, 0xe8, 0xf4, 0xc0, 0x92, 0xbf, 0xf6, 0xfc,
	0x0a, 0x46, 0x54, 0x6a, 0xb1, 0x36, 0x52, 0xbd, 0xe2, 0x31, 0x8c, 0xee, 0x57, 0x34, 0x5d, 0x5e,
	0xaf, 0x52, 0x1a, 0x78, 0xf8, 0x04, 0x20, 0xa1, 0x94, 0xdd, 0xe5, 0x2c, 0xc9, 0xb2, 0x00, 0xe1,
	0x29, 0xf8, 0x45, 0x9a, 0xe5, 0x0f, 0x29, 0x5b, 0x16, 0x79, 0xe6, 0xc6, 0xc1, 0x62, 0xf1, 0xd5,
	0x11, 0xb4, 0xef, 0x08, 0xfa, 0xe9, 0x08, 0xfa, 0xe8, 0x89, 0xb7, 0xef, 0x89, 0xf7, 0xdd, 0x13,
	0xef, 0x71, 0xf6, 0x2c, 0xcd, 0xcb, 0xb6, 0x8c, 0xd6, 0xaa, 0x8a, 0x33, 0xd7, 0x86, 0x72, 0x15,
	0x1f, 0x2a, 0xc5, 0x3b, 0x97, 0x2e, 0x36, 0xef, 0xb5, 0x68, 0xca, 0x63, 0x57, 0xf0, 0xf2, 0x37,
	0x00, 0x00, 0xff, 0xff, 0x1d, 0xbf, 0x6a, 0xc1, 0x54, 0x01, 0x00, 0x00,
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BaseAssetReserve) > 0 {
		i -= len(m.BaseAssetReserve)
		copy(dAtA[i:], m.BaseAssetReserve)
		i = encodeVarintVamm(dAtA, i, uint64(len(m.BaseAssetReserve)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.QuoteAssetReserve) > 0 {
		i -= len(m.QuoteAssetReserve)
		copy(dAtA[i:], m.QuoteAssetReserve)
		i = encodeVarintVamm(dAtA, i, uint64(len(m.QuoteAssetReserve)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TradeLimitRatio) > 0 {
		i -= len(m.TradeLimitRatio)
		copy(dAtA[i:], m.TradeLimitRatio)
		i = encodeVarintVamm(dAtA, i, uint64(len(m.TradeLimitRatio)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pair) > 0 {
		i -= len(m.Pair)
		copy(dAtA[i:], m.Pair)
		i = encodeVarintVamm(dAtA, i, uint64(len(m.Pair)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVamm(dAtA []byte, offset int, v uint64) int {
	offset -= sovVamm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pair)
	if l > 0 {
		n += 1 + l + sovVamm(uint64(l))
	}
	l = len(m.TradeLimitRatio)
	if l > 0 {
		n += 1 + l + sovVamm(uint64(l))
	}
	l = len(m.QuoteAssetReserve)
	if l > 0 {
		n += 1 + l + sovVamm(uint64(l))
	}
	l = len(m.BaseAssetReserve)
	if l > 0 {
		n += 1 + l + sovVamm(uint64(l))
	}
	return n
}

func sovVamm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVamm(x uint64) (n int) {
	return sovVamm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVamm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVamm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVamm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVamm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pair = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeLimitRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVamm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVamm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVamm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeLimitRatio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteAssetReserve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVamm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVamm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVamm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteAssetReserve = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAssetReserve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVamm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVamm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVamm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseAssetReserve = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVamm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVamm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVamm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVamm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVamm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVamm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVamm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVamm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVamm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVamm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVamm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVamm = fmt.Errorf("proto: unexpected end of group")
)

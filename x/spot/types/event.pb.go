// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: spot/v1/event.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventPoolCreated struct {
	// the address of the user who created the pool
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// the pool id
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// the amount of tokens that the user deposited
	Fees []types.Coin `protobuf:"bytes,3,rep,name=fees,proto3" json:"fees"`
	// the final state of the pool
	FinalPool Pool `protobuf:"bytes,4,opt,name=final_pool,json=finalPool,proto3" json:"final_pool"`
	// the amount of pool shares that the user received
	FinalUserPoolShares types.Coin `protobuf:"bytes,5,opt,name=final_user_pool_shares,json=finalUserPoolShares,proto3" json:"final_user_pool_shares"`
}

func (m *EventPoolCreated) Reset()         { *m = EventPoolCreated{} }
func (m *EventPoolCreated) String() string { return proto.CompactTextString(m) }
func (*EventPoolCreated) ProtoMessage()    {}
func (*EventPoolCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_b076fd0fab18c3a9, []int{0}
}
func (m *EventPoolCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPoolCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPoolCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPoolCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPoolCreated.Merge(m, src)
}
func (m *EventPoolCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventPoolCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPoolCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventPoolCreated proto.InternalMessageInfo

func (m *EventPoolCreated) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *EventPoolCreated) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *EventPoolCreated) GetFees() []types.Coin {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *EventPoolCreated) GetFinalPool() Pool {
	if m != nil {
		return m.FinalPool
	}
	return Pool{}
}

func (m *EventPoolCreated) GetFinalUserPoolShares() types.Coin {
	if m != nil {
		return m.FinalUserPoolShares
	}
	return types.Coin{}
}

type EventPoolJoined struct {
	// the address of the user who joined the pool
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// the pool id
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// the amount of tokens that the user deposited
	TokensIn []types.Coin `protobuf:"bytes,3,rep,name=tokens_in,json=tokensIn,proto3" json:"tokens_in"`
	// the amount of pool shares that the user received
	PoolSharesOut types.Coin `protobuf:"bytes,4,opt,name=pool_shares_out,json=poolSharesOut,proto3" json:"pool_shares_out"`
	// the amount of fees collected by the pool
	RemCoins []types.Coin `protobuf:"bytes,5,rep,name=rem_coins,json=remCoins,proto3" json:"rem_coins"`
	// the final state of the pool
	FinalPool Pool `protobuf:"bytes,6,opt,name=final_pool,json=finalPool,proto3" json:"final_pool"`
	// the final amount of user pool shares
	FinalUserPoolShares types.Coin `protobuf:"bytes,7,opt,name=final_user_pool_shares,json=finalUserPoolShares,proto3" json:"final_user_pool_shares"`
}

func (m *EventPoolJoined) Reset()         { *m = EventPoolJoined{} }
func (m *EventPoolJoined) String() string { return proto.CompactTextString(m) }
func (*EventPoolJoined) ProtoMessage()    {}
func (*EventPoolJoined) Descriptor() ([]byte, []int) {
	return fileDescriptor_b076fd0fab18c3a9, []int{1}
}
func (m *EventPoolJoined) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPoolJoined) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPoolJoined.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPoolJoined) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPoolJoined.Merge(m, src)
}
func (m *EventPoolJoined) XXX_Size() int {
	return m.Size()
}
func (m *EventPoolJoined) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPoolJoined.DiscardUnknown(m)
}

var xxx_messageInfo_EventPoolJoined proto.InternalMessageInfo

func (m *EventPoolJoined) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventPoolJoined) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *EventPoolJoined) GetTokensIn() []types.Coin {
	if m != nil {
		return m.TokensIn
	}
	return nil
}

func (m *EventPoolJoined) GetPoolSharesOut() types.Coin {
	if m != nil {
		return m.PoolSharesOut
	}
	return types.Coin{}
}

func (m *EventPoolJoined) GetRemCoins() []types.Coin {
	if m != nil {
		return m.RemCoins
	}
	return nil
}

func (m *EventPoolJoined) GetFinalPool() Pool {
	if m != nil {
		return m.FinalPool
	}
	return Pool{}
}

func (m *EventPoolJoined) GetFinalUserPoolShares() types.Coin {
	if m != nil {
		return m.FinalUserPoolShares
	}
	return types.Coin{}
}

type EventPoolExited struct {
	// the address of the user who exited the pool
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// the pool id
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// the amount of pool shares that the user exited with
	PoolSharesIn types.Coin `protobuf:"bytes,3,opt,name=pool_shares_in,json=poolSharesIn,proto3" json:"pool_shares_in"`
	// the amount of tokens returned to the user
	TokensOut []types.Coin `protobuf:"bytes,4,rep,name=tokens_out,json=tokensOut,proto3" json:"tokens_out"`
	// the amount of fees collected by the pool
	Fees []types.Coin `protobuf:"bytes,5,rep,name=fees,proto3" json:"fees"`
	// the final state of the pool
	FinalPool Pool `protobuf:"bytes,6,opt,name=final_pool,json=finalPool,proto3" json:"final_pool"`
	// the final amount of user pool shares
	FinalUserPoolShares types.Coin `protobuf:"bytes,7,opt,name=final_user_pool_shares,json=finalUserPoolShares,proto3" json:"final_user_pool_shares"`
}

func (m *EventPoolExited) Reset()         { *m = EventPoolExited{} }
func (m *EventPoolExited) String() string { return proto.CompactTextString(m) }
func (*EventPoolExited) ProtoMessage()    {}
func (*EventPoolExited) Descriptor() ([]byte, []int) {
	return fileDescriptor_b076fd0fab18c3a9, []int{2}
}
func (m *EventPoolExited) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPoolExited) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPoolExited.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPoolExited) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPoolExited.Merge(m, src)
}
func (m *EventPoolExited) XXX_Size() int {
	return m.Size()
}
func (m *EventPoolExited) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPoolExited.DiscardUnknown(m)
}

var xxx_messageInfo_EventPoolExited proto.InternalMessageInfo

func (m *EventPoolExited) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventPoolExited) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *EventPoolExited) GetPoolSharesIn() types.Coin {
	if m != nil {
		return m.PoolSharesIn
	}
	return types.Coin{}
}

func (m *EventPoolExited) GetTokensOut() []types.Coin {
	if m != nil {
		return m.TokensOut
	}
	return nil
}

func (m *EventPoolExited) GetFees() []types.Coin {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *EventPoolExited) GetFinalPool() Pool {
	if m != nil {
		return m.FinalPool
	}
	return Pool{}
}

func (m *EventPoolExited) GetFinalUserPoolShares() types.Coin {
	if m != nil {
		return m.FinalUserPoolShares
	}
	return types.Coin{}
}

type EventAssetsSwapped struct {
	// the address of the user who swapped tokens
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// the pool id
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// the amount of tokens that the user deposited
	TokenIn types.Coin `protobuf:"bytes,3,opt,name=token_in,json=tokenIn,proto3" json:"token_in"`
	// the amount of tokens that the user received
	TokenOut types.Coin `protobuf:"bytes,4,opt,name=token_out,json=tokenOut,proto3" json:"token_out"`
	// the amount of fees collected by the pool
	Fee types.Coin `protobuf:"bytes,5,opt,name=fee,proto3" json:"fee"`
	// the final state of the pool
	FinalPool Pool `protobuf:"bytes,6,opt,name=final_pool,json=finalPool,proto3" json:"final_pool"`
}

func (m *EventAssetsSwapped) Reset()         { *m = EventAssetsSwapped{} }
func (m *EventAssetsSwapped) String() string { return proto.CompactTextString(m) }
func (*EventAssetsSwapped) ProtoMessage()    {}
func (*EventAssetsSwapped) Descriptor() ([]byte, []int) {
	return fileDescriptor_b076fd0fab18c3a9, []int{3}
}
func (m *EventAssetsSwapped) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAssetsSwapped) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAssetsSwapped.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAssetsSwapped) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAssetsSwapped.Merge(m, src)
}
func (m *EventAssetsSwapped) XXX_Size() int {
	return m.Size()
}
func (m *EventAssetsSwapped) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAssetsSwapped.DiscardUnknown(m)
}

var xxx_messageInfo_EventAssetsSwapped proto.InternalMessageInfo

func (m *EventAssetsSwapped) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventAssetsSwapped) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *EventAssetsSwapped) GetTokenIn() types.Coin {
	if m != nil {
		return m.TokenIn
	}
	return types.Coin{}
}

func (m *EventAssetsSwapped) GetTokenOut() types.Coin {
	if m != nil {
		return m.TokenOut
	}
	return types.Coin{}
}

func (m *EventAssetsSwapped) GetFee() types.Coin {
	if m != nil {
		return m.Fee
	}
	return types.Coin{}
}

func (m *EventAssetsSwapped) GetFinalPool() Pool {
	if m != nil {
		return m.FinalPool
	}
	return Pool{}
}

func init() {
	proto.RegisterType((*EventPoolCreated)(nil), "nibiru.spot.v1.EventPoolCreated")
	proto.RegisterType((*EventPoolJoined)(nil), "nibiru.spot.v1.EventPoolJoined")
	proto.RegisterType((*EventPoolExited)(nil), "nibiru.spot.v1.EventPoolExited")
	proto.RegisterType((*EventAssetsSwapped)(nil), "nibiru.spot.v1.EventAssetsSwapped")
}

func init() { proto.RegisterFile("spot/v1/event.proto", fileDescriptor_b076fd0fab18c3a9) }

var fileDescriptor_b076fd0fab18c3a9 = []byte{
	// 532 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0x41, 0x6f, 0xd3, 0x3e,
	0x18, 0xc6, 0x9b, 0xb6, 0x6b, 0xff, 0xf5, 0xfe, 0x6c, 0xc8, 0x9b, 0x20, 0xec, 0x10, 0xaa, 0x9d,
	0x2a, 0x0e, 0xb6, 0xba, 0x9d, 0x40, 0x08, 0x89, 0x95, 0x0a, 0x95, 0x03, 0xa0, 0x0e, 0x2e, 0x5c,
	0xa2, 0xa4, 0x79, 0xdb, 0x5a, 0xb4, 0x76, 0x64, 0x3b, 0x65, 0x7c, 0x06, 0x2e, 0x70, 0xe5, 0x4b,
	0xf0, 0x35, 0x76, 0xdc, 0x91, 0x13, 0x42, 0xed, 0x17, 0x41, 0xb6, 0xd3, 0x52, 0x90, 0xd0, 0xb2,
	0x8e, 0x03, 0xb7, 0x38, 0x7e, 0x9f, 0x37, 0x8f, 0x9f, 0x5f, 0x5e, 0xa3, 0x3d, 0x95, 0x0a, 0x4d,
	0x67, 0x6d, 0x0a, 0x33, 0xe0, 0x9a, 0xa4, 0x52, 0x68, 0x81, 0x77, 0x38, 0x8b, 0x99, 0xcc, 0x88,
	0xd9, 0x23, 0xb3, 0xf6, 0xc1, 0xfe, 0x48, 0x8c, 0x84, 0xdd, 0xa2, 0xe6, 0xc9, 0x55, 0x1d, 0x04,
	0x03, 0xa1, 0xa6, 0x42, 0xd1, 0x38, 0x52, 0x40, 0x67, 0xed, 0x18, 0x74, 0xd4, 0xa6, 0x03, 0xc1,
	0x78, 0xbe, 0x8f, 0x97, 0xad, 0x53, 0x21, 0x26, 0xee, 0xdd, 0xe1, 0x87, 0x32, 0xba, 0xd9, 0x35,
	0x5f, 0x7a, 0x29, 0xc4, 0xa4, 0x23, 0x21, 0xd2, 0x90, 0x60, 0x1f, 0xd5, 0x07, 0xe6, 0x51, 0x48,
	0xdf, 0x6b, 0x7a, 0xad, 0x46, 0x7f, 0xb9, 0xc4, 0xb7, 0x51, 0xdd, 0x88, 0x43, 0x96, 0xf8, 0xe5,
	0xa6, 0xd7, 0xaa, 0xf6, 0x6b, 0x66, 0xd9, 0x4b, 0xf0, 0x31, 0xaa, 0x0e, 0x01, 0x94, 0x5f, 0x69,
	0x56, 0x5a, 0xdb, 0x47, 0x77, 0x88, 0xb3, 0x42, 0x8c, 0x15, 0x92, 0x5b, 0x21, 0x1d, 0xc1, 0xf8,
	0x49, 0xf5, 0xfc, 0xdb, 0xdd, 0x52, 0xdf, 0x16, 0xe3, 0xfb, 0x08, 0x0d, 0x19, 0x8f, 0x26, 0xa1,
	0x69, 0xe2, 0x57, 0x9b, 0x5e, 0x6b, 0xfb, 0x68, 0x9f, 0xfc, 0x7a, 0x56, 0x62, 0x8c, 0xe5, 0xaa,
	0x86, 0xad, 0x36, 0x2f, 0xf0, 0x2b, 0x74, 0xcb, 0x49, 0x33, 0x05, 0xd2, 0xea, 0x43, 0x35, 0x8e,
	0x24, 0x28, 0x7f, 0xcb, 0xb6, 0xb9, 0xd4, 0xc1, 0x9e, 0x95, 0xbf, 0x56, 0x20, 0x4d, 0xbf, 0x53,
	0xab, 0x3d, 0xfc, 0x5c, 0x41, 0xbb, 0xab, 0x34, 0x9e, 0x09, 0xc6, 0x5d, 0x18, 0x51, 0x92, 0x48,
	0x50, 0x6a, 0x19, 0x46, 0xbe, 0xfc, 0x73, 0x18, 0x0f, 0x51, 0x43, 0x8b, 0xb7, 0xc0, 0x55, 0xc8,
	0x78, 0xd1, 0x44, 0xfe, 0x73, 0x8a, 0x1e, 0xc7, 0x4f, 0xd1, 0xee, 0xda, 0x79, 0x42, 0x91, 0xe9,
	0x3c, 0x9a, 0x4b, 0x7b, 0xdc, 0x48, 0x57, 0x47, 0x79, 0x91, 0x69, 0x63, 0x43, 0xc2, 0x34, 0x34,
	0x7f, 0x80, 0x89, 0xa5, 0x98, 0x0d, 0x09, 0x53, 0xb3, 0xfc, 0x1d, 0x4e, 0xed, 0xef, 0xc0, 0xa9,
	0x5f, 0x03, 0xce, 0xa7, 0x75, 0x38, 0xdd, 0x33, 0xa6, 0x37, 0x83, 0xd3, 0x45, 0x3b, 0xeb, 0xf1,
	0x5a, 0x42, 0x85, 0x4c, 0xfd, 0xff, 0x33, 0xdd, 0x1e, 0xc7, 0x8f, 0x10, 0xca, 0x19, 0x3b, 0x40,
	0x85, 0xd2, 0xcd, 0x7f, 0x0b, 0x03, 0x67, 0x39, 0x30, 0x5b, 0x9b, 0x0f, 0xcc, 0x3f, 0xc0, 0xe4,
	0x4b, 0x19, 0x61, 0xcb, 0xe4, 0xb1, 0x52, 0xa0, 0xd5, 0xe9, 0xbb, 0x28, 0x4d, 0x37, 0xc3, 0xf2,
	0x00, 0xb9, 0x09, 0xb8, 0x02, 0x90, 0xba, 0x15, 0xf4, 0xf8, 0x6a, 0xde, 0xae, 0x32, 0x2b, 0xee,
	0x6b, 0x86, 0x44, 0x1b, 0x55, 0x86, 0x00, 0x45, 0xef, 0x0d, 0x53, 0x7b, 0x0d, 0x0e, 0x27, 0x4f,
	0xce, 0xe7, 0x81, 0x77, 0x31, 0x0f, 0xbc, 0xef, 0xf3, 0xc0, 0xfb, 0xb8, 0x08, 0x4a, 0x17, 0x8b,
	0xa0, 0xf4, 0x75, 0x11, 0x94, 0xde, 0xdc, 0x1b, 0x31, 0x3d, 0xce, 0x62, 0x32, 0x10, 0x53, 0xfa,
	0xdc, 0xb6, 0xea, 0x8c, 0x23, 0xc6, 0xa9, 0x6b, 0x4b, 0xcf, 0xa8, 0xbd, 0xbe, 0xf5, 0xfb, 0x14,
	0x54, 0x5c, 0xb3, 0xb7, 0xf7, 0xf1, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x52, 0xb6, 0xe9, 0xb7,
	0x2e, 0x06, 0x00, 0x00,
}

func (m *EventPoolCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPoolCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPoolCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FinalUserPoolShares.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.FinalPool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Fees) > 0 {
		for iNdEx := len(m.Fees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PoolId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPoolJoined) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPoolJoined) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPoolJoined) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FinalUserPoolShares.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.FinalPool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.RemCoins) > 0 {
		for iNdEx := len(m.RemCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RemCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size, err := m.PoolSharesOut.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.TokensIn) > 0 {
		for iNdEx := len(m.TokensIn) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokensIn[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PoolId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPoolExited) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPoolExited) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPoolExited) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FinalUserPoolShares.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.FinalPool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Fees) > 0 {
		for iNdEx := len(m.Fees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.TokensOut) > 0 {
		for iNdEx := len(m.TokensOut) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokensOut[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.PoolSharesIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.PoolId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAssetsSwapped) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAssetsSwapped) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAssetsSwapped) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FinalPool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.TokenOut.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.TokenIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.PoolId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventPoolCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovEvent(uint64(m.PoolId))
	}
	if len(m.Fees) > 0 {
		for _, e := range m.Fees {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	l = m.FinalPool.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.FinalUserPoolShares.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *EventPoolJoined) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovEvent(uint64(m.PoolId))
	}
	if len(m.TokensIn) > 0 {
		for _, e := range m.TokensIn {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	l = m.PoolSharesOut.Size()
	n += 1 + l + sovEvent(uint64(l))
	if len(m.RemCoins) > 0 {
		for _, e := range m.RemCoins {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	l = m.FinalPool.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.FinalUserPoolShares.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *EventPoolExited) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovEvent(uint64(m.PoolId))
	}
	l = m.PoolSharesIn.Size()
	n += 1 + l + sovEvent(uint64(l))
	if len(m.TokensOut) > 0 {
		for _, e := range m.TokensOut {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	if len(m.Fees) > 0 {
		for _, e := range m.Fees {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	l = m.FinalPool.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.FinalUserPoolShares.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *EventAssetsSwapped) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovEvent(uint64(m.PoolId))
	}
	l = m.TokenIn.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.TokenOut.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.Fee.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.FinalPool.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventPoolCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPoolCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPoolCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = append(m.Fees, types.Coin{})
			if err := m.Fees[len(m.Fees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FinalPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalUserPoolShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FinalUserPoolShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPoolJoined) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPoolJoined: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPoolJoined: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokensIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokensIn = append(m.TokensIn, types.Coin{})
			if err := m.TokensIn[len(m.TokensIn)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolSharesOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolSharesOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemCoins = append(m.RemCoins, types.Coin{})
			if err := m.RemCoins[len(m.RemCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FinalPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalUserPoolShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FinalUserPoolShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPoolExited) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPoolExited: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPoolExited: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolSharesIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolSharesIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokensOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokensOut = append(m.TokensOut, types.Coin{})
			if err := m.TokensOut[len(m.TokensOut)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = append(m.Fees, types.Coin{})
			if err := m.Fees[len(m.Fees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FinalPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalUserPoolShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FinalUserPoolShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAssetsSwapped) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAssetsSwapped: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAssetsSwapped: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FinalPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package ammv1

import (
	context "context"
	ormlist "github.com/cosmos/cosmos-sdk/orm/model/ormlist"
	ormtable "github.com/cosmos/cosmos-sdk/orm/model/ormtable"
	ormerrors "github.com/cosmos/cosmos-sdk/orm/types/ormerrors"
)

type PoolTable interface {
	Insert(ctx context.Context, pool *Pool) error
	Update(ctx context.Context, pool *Pool) error
	Save(ctx context.Context, pool *Pool) error
	Delete(ctx context.Context, pool *Pool) error
	Has(ctx context.Context, pair string) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, pair string) (*Pool, error)
	List(ctx context.Context, prefixKey PoolIndexKey, opts ...ormlist.Option) (PoolIterator, error)
	ListRange(ctx context.Context, from, to PoolIndexKey, opts ...ormlist.Option) (PoolIterator, error)
	DeleteBy(ctx context.Context, prefixKey PoolIndexKey) error
	DeleteRange(ctx context.Context, from, to PoolIndexKey) error

	doNotImplement()
}

type PoolIterator struct {
	ormtable.Iterator
}

func (i PoolIterator) Value() (*Pool, error) {
	var pool Pool
	err := i.UnmarshalMessage(&pool)
	return &pool, err
}

type PoolIndexKey interface {
	id() uint32
	values() []interface{}
	poolIndexKey()
}

// primary key starting index..
type PoolPrimaryKey = PoolPairIndexKey

type PoolPairIndexKey struct {
	vs []interface{}
}

func (x PoolPairIndexKey) id() uint32            { return 0 }
func (x PoolPairIndexKey) values() []interface{} { return x.vs }
func (x PoolPairIndexKey) poolIndexKey()         {}

func (this PoolPairIndexKey) WithPair(pair string) PoolPairIndexKey {
	this.vs = []interface{}{pair}
	return this
}

type poolTable struct {
	table ormtable.Table
}

func (this poolTable) Insert(ctx context.Context, pool *Pool) error {
	return this.table.Insert(ctx, pool)
}

func (this poolTable) Update(ctx context.Context, pool *Pool) error {
	return this.table.Update(ctx, pool)
}

func (this poolTable) Save(ctx context.Context, pool *Pool) error {
	return this.table.Save(ctx, pool)
}

func (this poolTable) Delete(ctx context.Context, pool *Pool) error {
	return this.table.Delete(ctx, pool)
}

func (this poolTable) Has(ctx context.Context, pair string) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, pair)
}

func (this poolTable) Get(ctx context.Context, pair string) (*Pool, error) {
	var pool Pool
	found, err := this.table.PrimaryKey().Get(ctx, &pool, pair)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &pool, nil
}

func (this poolTable) List(ctx context.Context, prefixKey PoolIndexKey, opts ...ormlist.Option) (PoolIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return PoolIterator{it}, err
}

func (this poolTable) ListRange(ctx context.Context, from, to PoolIndexKey, opts ...ormlist.Option) (PoolIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return PoolIterator{it}, err
}

func (this poolTable) DeleteBy(ctx context.Context, prefixKey PoolIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this poolTable) DeleteRange(ctx context.Context, from, to PoolIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this poolTable) doNotImplement() {}

var _ PoolTable = poolTable{}

func NewPoolTable(db ormtable.Schema) (PoolTable, error) {
	table := db.GetTable(&Pool{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Pool{}).ProtoReflect().Descriptor().FullName()))
	}
	return poolTable{table}, nil
}

type AmmStore interface {
	PoolTable() PoolTable

	doNotImplement()
}

type ammStore struct {
	pool PoolTable
}

func (x ammStore) PoolTable() PoolTable {
	return x.pool
}

func (ammStore) doNotImplement() {}

var _ AmmStore = ammStore{}

func NewAmmStore(db ormtable.Schema) (AmmStore, error) {
	poolTable, err := NewPoolTable(db)
	if err != nil {
		return nil, err
	}

	return ammStore{
		poolTable,
	}, nil
}
